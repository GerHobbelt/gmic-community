%% x "mkdir -p img" rm %%
|+ [Cheat Home](cheatsheet.html) | [Custom Cheat](custom_cheat.html) | [Display Cheat](display_cheat.html) | [Debug Cheat](debug_cheat.html) |[Array Cheat](array_cheat.html) | [Substitution Cheat](subs_cheat.html)
|**Execute Cheat**|                    |                    |                    |                    |                    
### Cheat #7: Execute a Subprocess from G'MIC
#### TL;DR
|-![amp](images/amp.png)\n                  [French Flag Ampersand](#svgexample)|You want to run a script or program outside of your G'MIC script and harvest its output.\n\nFor that use the ''-exec'' command; shortcut: ''x''.\n\n`exec _is_verbose={ 0 or 1 },"command"`\n\n 1.  The first argument, `is_verbose`, defaults to `1`. Useful if you want to process whatever the external command writes to its standard output. But perhaps the command writes to a file. Then set `is_verbose` to zero and avoid string fetches you won't be using.\n 2.  The second argument invokes the script or program you wish to run outside of G'MIC. Write it, and its arguments, as if at a shell prompt.

The example uses this Python script:
===
~~~
 $ svghelper.py -h
usage: svghelper.py [-h] [-d DENSITY] [-o OUTPUT] [-n] fname

Plot points from SVG Path.

positional arguments:
  fname                 Strutured Vector Graphics (SVG) file

options:
  -h, --help            show this help message and exit
  -d DENSITY, --density DENSITY
                        Plot point quantity as powers of two;
                        4 -> 2^4 -> 16. Larger -> denser.
                        Defaults to 10 (1024)
  -o OUTPUT, --output OUTPUT
                        Text file for output plots.
  -n, --normalize       Normalize plots.
                        (1) Center of gravity maps to origin.
                        (2) Scaling of largest distance to 1,
                        (3) Preserves aspect ratio.
~~~
( Download [svghelper.py](scripts/svghelper.py) )
===
The python script harnesses Mathandy's [svgpathtools](https://github.com/mathandy/svgpathtools#svgpathtools) to parse Structured Vector Graphics files. The script digitizes the path of the first graphical object listed in the SVG file. While such a retrival serves our limited purposes, the script does not fully exercise `svgpathtool's` considerable capabilities — among which can be selections based on labeled paths. For the path-selection-impaired script `svghelper.py`, create an SVG document with just _one_ path.  

= svgexample
#### Example: Fetch SVG Path
~~~
svgtoimg: -check ${1=10}>0" && "isbool(${2=1})" && "isfile(['$3'])
    dens=$1
    norm=$2
    ifile=$3
    preamble="Read SVG path from "$ifile

    # Normalize plot points?
    -if $norm
       nflg='--normalize'
       echo[^-1] $preamble", normalize and digitize path to "{2^$dens}" plots."
    -else
       nflg=''
       echo[^-1] $preamble" and digitize path to "{2^$dens}" plots."
    -fi
 
    # Get name of a temporary file that
    # will live in the /tmp diretory.
    -filename_rand
    fn=${}

    # Command to execute:
    cmd="python scripts/svghelper.py --density "$dens" "$nflg" --output "$fn" "$ifile

    # Invoke script
    -exec 1,$cmd
    stdo=${}

    # Did the subprocess create an output?
    -if isfile(['$fn'])
        -input_csv $fn,0
	-exec 0,"rm "$fn
	-name. svgplots
    -else
        echo[^-1] "stdout dump: "$stdo
        error "Could not find: "$fn
    -fi
——————————

$ gmic scripts/svgtoimg.gmic -v + -svgtoimg 4,1,images/ampersand_circ.svg -v -
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input custom command file 'scripts/svgtoimg.gmic' (2 new, total: 4564).
[gmic]-0./ Increment verbosity level (set to 2).
[gmic]-0./svgtoimg/ Set local variable 'dens=4'.
[gmic]-0./svgtoimg/ Set local variable 'norm=1'.
[gmic]-0./svgtoimg/ Set local variable 'ifile=images/ampersand_circ.svg'.
[gmic]-0./svgtoimg/ Set local variable 'preamble=Read SVG path from '.
[gmic]-0./svgtoimg/*if/ Set local variable 'nflg='--normalize''.
[gmic]-0./svgtoimg/ Read SVG path from images/ampersand_circ.svg, normalize and digitize path to 16 plots.
[gmic]-0./svgtoimg/ Set local variable 'fn=/tmp/gmic17060476126'.
[gmic]-0./svgtoimg/ Set local variable 'cmd=python scripts/svghelper.py --density 4 '--normalize' --output /tmp/gm(...).
[gmic]-0./svgtoimg/ Execute external command 'python scripts/svghelper.py --densit(...)17060476126 images/ampersand_circ.svg' in verbose mode.
[gmic]-0./svgtoimg/ Set local variable 'stdo=0'.
[gmic]-0./svgtoimg/*if/ Input number array from file '/tmp/gmic17060476126'.
[gmic]-1./svgtoimg/*if/ Execute external command 'rm /tmp/gmic17060476126' .
[gmic]-1./svgtoimg/*if/ Set name of image [0] to 'svgplots'.
[gmic]-1./ Decrement verbosity level (set to 1).
[gmic]-1./ Display image [0] = 'svgplots'.
[0] = 'svgplots':
  size = (2,16,1,1) [128 b of float32].
  data = (-0.306328,0.0860442;-0.0848769,0.363683;-0.29221,0.177343;-0.127902,0.00188423;-0.200789,0.0523709;-0.144242,-0.305296;(...),0.349561,0.345194;0.389299,0.368731;0.31905,0.00283116;0.156633,-0.349672;-0.276443,-0.332615;-0.306328,0.0860442).
  min = -0.349672, max = 0.389299, mean = -1.2551e-09, std = 0.241429, coords_min = (1,13,0,0), coords_max = (0,11,0,0).
~~~
===
( Download [svgtoimg.gmic](scripts/svgtoimg.gmic) )
===
`svgtoimg` produces a 2 × _n_ image on the list containing _n_ plot points.

===
%% images/digitizedpath.jpg r2dx 50% %%
===

|- 1.  |`svgtoimg` assembles `cmd` from bits of unvarying text and custom command arguments. If this assembly is hard to follow, spend some time with G'MIC's [Substitution Rules](subs_cheat.html). When defining custom G'MIC commands, such as `svgtoimg`, we have `$-expressions` at our disposal; these map custom command arguments to numeric keys: `$0, $1, $2…`. `$0` substitutes for name used to invoke the script; the remaining pre-defined numeric substitutions represent arguments given to the custom command. In addition to these, there are other pre-defined `$-expressions` that furnish additional metrics about the custom command's arguments. Here, our game is one of transferring custom command arguments to their python script counterparts; _sic transit_ the first half of `svgtoimg`.  
| 2.  |The detection of a successful run of the python script hinges on an actual creation of some file; its name comes from `-filename_rand`. The litany of what can go wrong does not end with that file's creation. The python script might still hiccup and produce an empty file or one filled with random noise. But the absence of the expected file in its expected location is a clear show-stopper.\n\nA status check is viable too: `${}` is a predefined variable reserved for return values of custom commands. These may opt not to return anything; `${}` then is an empty string. However, python scripts launched via `exec`, do signal parent processes with return status values; successes are represented by zero values and anything else signals a failure of some sort. G'MIC acquires this return value from the python interpreter when the subprocess exits.\n\nThe compulsively industrious could set out to determine which disaster might have befallen the python script; the return status is an unsigned integer consisting of single-bit error flags. One could then assiduously map these flag bits to apt error messages. We are content to bail on any non-zero return value, issuing a generic message as we go.  
| 3.  |If we find that we have a file, we might hazard the guess that it is in good health. Having run the python script by hand outside of G'MIC, we know that correct output consists of numerical text strings of floats: the x-coordinate of a plot, a comma (`,`) the y-coordinate of the same plot, then a newline — and this pattern repeats, plot-by-plot, until the end-of-file marker. This is a comma-separated value file; it could be read into G'MIC by ''-input_csv'', which takes as arguments a file of comma separated values, and a flag guiding how to interpret its content: `0` means we wish `input_csv` will translate numerical text into actual floating point numerals; `1` indicates that we prefer text input, untranslated. In either case, `input_csv` places an image on the list: 2 × _n_ for _n_, the number of coordinate pairs found in the file.

Perhaps you want to plot this data. Then consider `imgplot`:

= pltexample
### Example: Plot Points
~~~
imgplot: -check ${is_image_arg\ $1}" && "${2=1}>0
       -echo[^-1] "Plot on selected images data from image$? with scaling ${2}"
       scale=$2
       -pass$1 1
       foreach[^-1] {
          -name. canvas
          -pass[-1] 0
          -name. svgplots
          -permute[svgplots] cyzx
          -fill[svgplots] "
                             begin(
                                    sw=min(w#$canvas,h#$canvas)/2;
                                    id=eye(3);
                                    id[0]=$scale*sw;
                                    id[2]=sw;
                                    id[4]=-$scale*sw;
                                    id[5]=sw
                                  );
                             (id*[I(x,y),1])[0,2]
                          "
          -permute[svgplots] cyzx
          -eval "
                  PV=crop(#$svgplots);
                  polygon(#$canvas,
                          -int(size(PV)/2),
                          PV,
                          1,
                          0xffffffff,
                          255
                         )
                "
          -remove[svgplots]
       }
       -remove.
——————————
$ gmic scripts/svgtoimg.gmic -svgtoimg 6,1,images/ampersand_circ.svg -name. plots 512,512,1,1 -name. canvas -v + imgplot[canvas] [plots],1.75
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input custom command file 'scripts/svgtoimg.gmic' (2 new, total: 4564).
[gmic]-0./svgtoimg/ Read SVG path from images/ampersand_circ.svg, normalize and digitize path to 64 plots.
[gmic]-1./ Set name of image [0] to 'plots'.
[gmic]-1./ Input black image at position 1 (1 image 512x512x1x1).
[gmic]-2./ Set name of image [1] to 'canvas'.
[gmic]-2./ Increment verbosity level (set to 2).
[gmic]-1./ Plot on selected images data from image [1] with scaling 1.75
[gmic]-1./imgplot/ Set local variable 'scale=1.75'.
[gmic]-1./imgplot/ Insert image [0] from parent context in shared state.
[gmic]-1./imgplot/*foreach/ Set name of image [0] to 'canvas'.
[gmic]-1./imgplot/*foreach/ Insert image [1] from parent context in non-shared state.
[gmic]-2./imgplot/*foreach/ Set name of image [1] to 'svgplots'.
[gmic]-2./imgplot/*foreach/ Permute axes of image [1], with permutation 'cyzx'.
[gmic]-2./imgplot/*foreach/ Fill image [1] with expression ' begin( sw=min(w#$canvas,h#$canvas)/2;(...)sw; id[5]=sw ); (id*[I(x,y),1])[0,2] '.
[gmic]-2./imgplot/*foreach/ Permute axes of image [1], with permutation 'cyzx'.
[gmic]-2./imgplot/*foreach/ Evaluate expression ' PV=crop(#$svgplots); polygon(#$canvas(...)ize(PV)/2), PV, 1, 0xffffffff, 255 ) ' and assign it to status.
[gmic]-2./imgplot/*foreach/ Remove image [1] (1 image left).
[gmic]-2./imgplot/ Remove image [1] (1 image left).
[gmic]-2./ Display images [0,1] = 'plots, canvas'.
[0] = 'plots':
  size = (2,64,1,1) [512 b of float32].
  data = (-0.276844,0.0719817;-0.306167,0.161578;-0.275229,0.249145;-0.197808,0.309231;-0.1046,0.316088;-0.0414858,0.255473;(...),-0.189243,-0.331823;-0.265615,-0.274045;-0.31687,-0.193355;-0.331768,-0.100003;-0.308596,-0.00714994;-0.276844,0.0719817).
  min = -0.358714, max = 0.3991, mean = -3.13776e-10, std = 0.202658, coords_min = (1,57,0,0), coords_max = (0,48,0,0).
[1] = 'canvas':
  size = (512,512,1,1) [1024 Kio of float32].
  data = (0,0,0,0,0,0,0,0,0,0,0,0,(...),0,0,0,0,0,0,0,0,0,0,0,0).
  min = 0, max = 255, mean = 2.26261, std = 23.9134, coords_min = (0,0,0,0), coords_max = (373,111,0,0).
~~~
===
![CoarseAmpersand](images/coarseamper.png)
Coarse Ampersand: 64 plot points
===
|- 1.  |[Drawing wheelies](https://gmic.eu/tutorial/from_wheelies_arabesques.html#threewheelieredrawn) also makes use of this [Mathematical expression](https://gmic.eu/reference/mathematical_expressions.html#top) based plotter. ''-fill'' takes a [pixel processor](https://gmic.eu/tutorial/fill.html#math_expressions) to scale and translate the normalized data in `svgplots` to the specific size of selected images; `$scale` furnishes a mechanism to further resize this transform. The pixel processor composes the transformation matrix `id` in a `begin()` statement; this statement executes its argument once before the start of pixel processing. During pixel processing, it applies matrix `id` to each plot point in `svgplots`, scaling and translating these to fit the currently selected image.  A second mathematical expression, this the argument to ''-eval'', plots the entire data set by way of the mathematical expression `polygon()`. Here, the image `svgplots` served as a data exchange mechanism between the two math expressions, which are otherwise wholly isolated from one another. 
---
Updated: May 08 2023 22:37 UTC Commit: 8df222c0f3b2b56953bae64f8eda7c4ae15d0993 
