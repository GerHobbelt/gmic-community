%% x "mkdir -p img" rm %%
|+ [Cheat Home](cheatsheet.html) | [Custom Cheat](custom_cheat.html) | **Display Cheat** | [Debug Cheat](debug_cheat.html) |[Array Cheat](array_cheat.html)|[Substitution Chet](subs_cheat.html)
|                    |                    |                    |                    |                    |                    
%%  images/e_letter.png r. 10%,10%,100%,100%,5 o. img/e_ltr_norm.png n. {0.7*ia},{1.3*ia} o. img/e_ltr_fade.png 250,250,1,3 o. img/lightgray.png rm %%
= thedisplaycommandlies
### Cheat #3: The `-display` Command Lies
__TL;DR:__ `-display` does not preview your `-output.` For that, consider [-display0](https://gmic.eu/reference/display0.html#top).

You want to shrink and fade but preview before committing. "That's what ''display'' is for!" you think.

|-![eletterfade](img/e_ltr_fade.png)|Fade effect game plan: ''-normalize'' in a narrow range around the image average (`ia`).
|`shrinkfade: ` \n `  -resize. 10%,10%,100%,100%,5 ` \n `  -normalize {0.7*ia},{1.3*ia} `|shrink to ten percent, normalize to a narrow\nrange around image average. A [math expression](https://gmic.eu/reference/mathematical_expressions.html#top)\nfinds that range around the predefined `ia` variable\n(for "image average").
|![eletternorm](img/e_ltr_norm.png)|Now apply `shrinkfade`:\n`gmic shrinkfade.gmic -input e_letter.png -shrinkfade -display` \nNot faded ???

The results are not faded.
|Check:     |`-shrinkfade` is on the command line.| □
|Check:     |the command file itself has `-normalize {0.7*ia},{1.3*ia}`| □
|Check:     |G'MIC's _very own processing log_ reports a narrow range| □
~~~
…min = 29750.1, max = 49583.6, mean = 41754.9,…
~~~
|Conclusion:|G'MIC's broken (again!).

Angrily, you write an ALL CAPS post to the G'MIC developers: __DO SUCH OBTUSE STUPIDITIES COME NATURALLY TO YOU GUYS OR DID YOU HAVE TO ___STUDY___ __?!?!?__

The G'MIC developers shrug, (_déjà vu_ all over again), pin the post to the wall under the rubric "display strikes again", then depart for a fine repast at _[La Cafétéria de l'ENSI](https://restaurantguru.com/La-cafeteria-de-lENSI-Caen)_ or some other such gastronomic emporia like that.

The `-display` command implicitly normalizes items on image lists, a convenience that sows no end of confusion among new (and experienced) G'MIC users. The game `-display` tries to play is to give some _indication_ of what an image may contain, given that an image may contain data that spans several orders of magnitude, that may not have any reasonable visualization at all. So, `-display` normalizes to a range that most desktop/laptop displays can handle: 8 bit-per-channel RGB. Technically, this is something of a Hail Mary pass that sometimes leads to ludicrous results.
===
![displayfail](img/lightgray.png)
** Not Quite A Light Gray: [237,237,237] **
===

The pipeline:
~~~
gmic -input 300,300,1,3,[237,237,237] -name. lightgray -display[lightgray]
~~~
produces a solid light RGB image that is a gray, as indicated by G'MIC's own output log:
~~~
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input image at position 0, with values '[237,237,237]' (1 image 300x300x1x3).
[gmic]-1./ Set name of image [0] to 'lightgray'.
[gmic]-1./ Display image [0] = 'lightgray', from point (150,150,0).
[0] = 'lightgray':
  size = (300,300,1,3) [1054 Kio of floats].
  data = (237,237,237,237,237,237,237,237,237,237,237,237,(...),237,237,237,237,237,237,237,237,237,237,237,237).
  min = 237, max = 237, mean = 237, std = 0, coords_min = (0,0,0,0), coords_max = (0,0,0,0).
~~~
which leads you to believe that what you have produced is a light, solid gray image. Indeed, you ___have___ produced a light, solid gray image, but `-display`'s necessary normalization strategy is deceived. Using the same mechanism that the [normalize](https://gmic.eu/tutorial/normalize.html) command uses, when confronted with an image that contains just _one_ value — here, `237` — throughout, the display command has no basis to establish an _input range_, to which it can then map an output range! The [H-L Normalizaton Relation](https://gmic.eu/tutorial/normalize#on_a_more_serious_note) says it all. Unable to distinguish an image minimum (`im`) from an image maximum (`iM`) — because all image values are the same — `-display` folds its tent rather than divide by zero. Lacking a 'mapping hint' like the normalize [constant case ratio](https://gmic.eu/tutorial/normalize.html#command_reference), the `-display` command punts and, for display purposes, maps the single value to the bottom of the putative output range, the zero of `[0 → 255]`, which could work in some circumstances, but not this one. And so, trying to please (somehow!), `-display` lies.

Updated: 07-September-2021 11:05 UTC Commit: c85a4f425469
