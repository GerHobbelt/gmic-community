# store
%% x "mkdir -p img" %%
|![usdoj](images/usdoj_1892.jpg) *Document store, United States Department of Justice, 1892* _[Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Files_in_the_Department_of_Justice,_1892.jpg)_|''-store'' transfers the selected images to __image storage variables__, identified by one or more names given as command line arguments. Unless it has a '+' left hand decoration, ''-store'' removes the selected images from the image list. A '+' lefthand decorator prompts image duplication prior to any command's execution, see [Command Decorations](https://gmic.eu/tutorial/command_decorations.html), preserving the image as the duplicate is first stored and then removed from the image list.

Stored images may be retrieved and returned to the image list by the ''-input'' command, providing as arguments image storage variables created by `-store` commands.

## Examples
===
%% sp car,300 store orangecar $orangecar %%
===
|1.  |__Store and retrieve__: Transfer an image to a variable and remove the image from the list. Restore it later in the pipeline via ''-input''.
===
~~~
gmic                     \
   -sample car,300       \
   -store[-1] orangecar  \
   ...                   \
   -input $orangecar     \
~~~
===

===
%% sp cat,300 store stuff i $stuff i $stuff i $stuff %%
===
|2.  |__Duplicate__:''-input'' does not delete, drain or otherwise change storage variables. Storage variables may be used to restore their related images any number of times. To get three orange cats:
===
~~~
gmic                     \
   -sample cat,300       \
   -store[-1] orangecat  \
   ...                   \
   -input $orangecat     \
   -input $orangecat     \
   -input $orangecat     \
~~~
===

===
%% sp cat,car,monkey,300 store myimagelist $myimagelist %%
===
|3.  |__Storing Image Lists__: If a single storage variable name is given to `-store`, all selected images are stored in the one storage variable. Its contents are similar to an independent image list.  
===
~~~
gmic                           \
   -sample cat,car,monkey,300  \
   -store myimagelist          \
   ...                         \
   -input $myimagelist         \

~~~
===

|4.  |__Storing Series of Single Images__: Furnishing `-store` with more than one image storage variable induces the command to store one image per argument. In this case, the number of arguments given to store must equal the number of selected images in the right hand decorator. Since the exact number of selected images may not be apparent from the selection decorator, employing image list notation (3.) is often less error prone.  
===
~~~
gmic                           \
   -sample cat,car,monkey,300  \
   -store cat,car
[gmic]-0./ Start G'MIC interpreter.
[gmic]-1./ Input sample image 'cat' (1 image 300x275x1x3).
[gmic]-2./ Input sample image 'car' (1 image 300x200x1x3).
[gmic]-3./ Input sample image 'monkey' (1 image 300x281x1x3).
[gmic]-3./ Store images [0,1,2] as  variables 'cat,car'
[gmic]-3./ *** Error *** Command 'store': Specified arguments 'cat,car' do not match numbers of selected images.
~~~
===

## Exchanging Data with the Math Expression Parser

''-store'' allied with the [Math Expression Parser's](https://gmic.eu/reference/mathematical_expressions.html#top) functions `store('image_storage_variable',A,_w,_h,_d,_s,_is_compressed)` and `get('image_storage_variable',_size,_return_as_string)` furnish the means to exchange data between the two environments.

===
%% eval "foo=vector256(0);for(n=0,n<256,foo[n]=u,n=n+1);store('fooimg',foo,16,16,1,1,0)" $fooimg r2dx 256,1 n 0,255 %%

~~~
gmic                                       \
   -eval "foo=vector256(0);                \
          for(n=0,n<256,foo[n]=u,n=n+1);   \
          store('fooimg',foo,16,16,1,1,0)" \
   -input $fooimg                          \
   -r2dx. 256,1                            \
   -normalize. 0,255                       \
   -output halfrandom.png
~~~
===

|1.  |__From Math variable to Image List via an Image Storage Variable__: Transform a math vector into an image by providing (1) a storage variable name and (2) image dimension arguments to `store()` Optionally, (3) compress the image data. The given storage variable name need not already exist; it is created as necessary.

===
%% 16,16,1,1,pi*x/(w-1) vlen={wh} -store. pyeramp eval "ref(get('pyeramp',"$vlen"),rampv);rampv=sin(rampv);store('sineimg',rampv,32,8,1,1,0)" $sineimg $pyeramp r2dx 256,1 n 0,255 o.. img/sine.png o. img/pyeramp.png rm 0 %%

| ![sineimg](img/sine.png) | ![pyeramp](img/pyeramp.png)
| *sineimg* | *pyeramp*

~~~
gmic                                          \
    16,16,1,1,pi*x/(w-1)                      \
    vlen={wh}                                 \
    -store. pyeramp                           \
    -eval "ref(get('pyeramp',"$vlen"),rampv); \
           rampv=sin(rampv);                  \
           store('sineimg',rampv,32,8,1,1,0)" \
    -input $sineimg                           \
    -input $pyeramp                           \
    -r2dx 256,1                               \
    -normalize 0,255                          \
~~~
===
|2.  |__Round Trip With Calculations Along the Way__: Image storage variables are _not_ native math expression variables; they appear in math expressions as quoted strings, and only within `store()` and `get()` argument lists. The purpose of `get()` is to map an image storage variable to a native math vector. Observe that `store()` maps vector `rampv` to a new image storage variable, this with different dimensions than the original. This is permissable so long as vector lengths are observed and steps are taken that the width x height product equals the vector length of the native math variable. Note that, in practice, `get()` is not as commonly used as `store()`. Other math expression functions such as `crop()` may more readily map image data to native math vectors. While math expression environments disappear at the end of evaluation, image storage variables persist in concert with (but independent of) the image list. They may be referenced in subsequent math expressions, admitting the possibility of using image storage variables as a 'persistent storage' for a series of math expressions.  

# Command reference

===
"""
gmic -h store
"""
===

Updated: Tuesday July 05 05:20:01 PM UTC 2022 Commit: 760e287045015c93416a5a2f9077c7ceaba8425b