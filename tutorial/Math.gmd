# Mathematical Expressions

= examone
__Example 1:__
You want to produce an output conditioned on an image feature:


|reducevariance: -skip ${1=256},${2=5},${3=5}\n
   sz,nlevel,cutoff=${1-3}
   -input $sz,$sz,1,3
   -name noisy
   -noise[noisy] $nlevel,0
   -normalize[noisy] 0,255
   -do
   -blur[noisy] 1,1
   -while iv>$cutoff
   -echo "Image\ Variance:\ "{iv}
~~~
===
%% 256,256,1,3 noise. 32,0 n. 0,255 do b. 1,1 while iv>4  %%

*Mostly invariant variance* 

===
A [Mathematical Expression](https://gmic.eu/index.html) asserts a ''-do'' … ''-while'' exit condition; iterative image blurring ceases when image variance, `iv`, falls beneath a supplied `cutoff` level.

= examtwo
__Example Two:__
You want to produce an image reflecting the averaged, absolute differences of luminance values between pixels and their immediate neighbors along the x-axis.

~~~
xdiff: 
    -luminance
    -fill. (abs((j(-1,0)-i))+abs(i-j(1,0)))/2
    -normalize. 0,255
~~~
===
|%% images/forestflowers.png r. 45%,45%,100%,100% %% | %% images/forestflowers.png r. 45%,45%,100%,100% -luminance. -f. (abs((j(-1,0)-i))+abs(i-j(1,0)))/2 n. 0,255 %%
|forest|differed forest
===
Commands ''-input'', ''-fill'' and ''-eval'' each may take [pel or pixel processors](https://gmic.eu/tutorial/fill.html#math_expressions) to define images procedurally. The processors:
|- 1.  |Define pels or pixels at image locations, when operating as the fifth component of an ''-input'' image definition, to wit: `w,h,d,s,procedure`
| 2.  |Change pels or pixels at image locations, when operating as a math expression argument to the ''-fill'' command
| 3.  |Read pels or pixels at image locations, when operating as a math expression evaluator argument to the ''-eval'' command.

= examthree
__Example Three:__
You want to compute a value to initialize a pipeline variable, based on certain characteristics of the default image. For that, use a mathematical image feature [Substitution Expression](https://gmic.eu/tutorial/subs_cheat.html#subexpressions).