# check (+)
%% x "mkdir -p img" %%
%% m scripts/roses.gmic roses 4096,1,0,-11,1,0,-7,1,0,5 expand_xy[canvas] 16 -dilate_circ[canvas] 16 *[canvas] -1 label[canvas] *[canvas] {255/iM} -map[canvas] hocuspocus r2dx[canvas] 300,5 o. img/arabesque.png rm %%
|![frontimage](img/arabesque.png)|''-check'' throws exceptions if the given test expressions resolve to false, otherwise taking no action. If any command on the calling chain is a ''-local'' … ''-endlocal'' block that has a defined ''-onfail'' section, the exception is caught and further processing resumes. Otherwise G'MIC prints the test expressions as an exception message, appearing in G'MIC's shell log.\nPrior to G'MIC 2.6, `-check` could take a file system object and test for its existence. That is no longer supported. Use the mathematical expression function `isfile()` or `isdir()` instead:\n\n`gmic check "isfile('/this/doesnt/exist.here')"`\n\nConsider using ''-error'' if some control over the error message is desired. `-error` unconditionally throws exceptions, so it is combined with conditional commands to emulate `-check,` but in a less compact way.
## Examples

## Drawing arabesques
In the realm of change two representations hold sway: variations in the frequency domain and those of time. The latter has a more visceral hold on us — we live through time — but the former indicates transience. And so in our school days we embarked upon forced marches through [Fourier transforms](https://en.wikipedia.org/wiki/Fourier_transform) from time to frequency and back again, not stopping to admire the scenery. A pity. Some of it is quite nice, and nearly all is thoroughly intriguing. Ponder wheels-within-wheels.

Not too many years ago, [wheels-within-wheels animations](https://www.youtube.com/watch?v=-qgreAUpPwM) erupted on YouTube and similar venues — fantastic constructions of gyrating circles, doing etch-a-sketch things: drawing birds, flowers, even portraits of Jean-Baptiste Joseph Fourier, the French mathematician who devised these eponymous transforms. [3blue1brown](https://www.youtube.com/watch?v=s_L-fp8gDzY) entered the expository fray with [But what is the Fourier Transform? A visual introduction.](https://www.youtube.com/watch?v=spUNpyF58BY) favoring illustrative animations over notational expository, capturing that crucial interplay between frequency and time. This is our arabesque jumping off point, which requires but few circles a-spinning.

With each we may:
1. rotate clockwise or counterclockwise.
2. choose a rate of rotation.
3. pick a starting orientation.
4. change diameter.
5. attach another circle to the rim. Do that any number of times, _or_
6. attach a pen to the rim of a terminal circle. Do that once.

Actions 1 through 4 encode a frequency sample: a circle of a particular size spinning in a particular manner. Action 5 admits samples in multitude. Action 6 connects frequency samples to time-varying phenomena. From aggregates of frequency encoding circles emerges a time-signal: the path that the pen draws. This may seem like silly fun — and it is — but that last action is key: it connects frequency and time through a chain of spinning cirles.

Now if we reach into our circle box and for each randomly perform Actions 1 through 4, attaching one to the other and a pen to the last, we will most very likely make for ourselves a scribbling machine! That is not an altogether terrible. Observe that the scribble will be very much arabesque in its nature.

But suppose we begin with — oh, say, a nicely digitized Goudy Bookletter 1911 ampersand, an ordered sequence of position samples in __x__ and __y__, which, it pleases us, to regard as real ( __x__ ) and imaginary ( __y__ )


# Command reference

===
"""
gmic -h check
"""
===
"""
date -u
"""
