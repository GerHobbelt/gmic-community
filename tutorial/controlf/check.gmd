# check (+)
%% x "mkdir -p img" %%
%% %%
| § |''-check'' throws exceptions if the given math expression argument resolves to False, otherwise it takes no action. It is the tool of choice for checking command arguments, taking math expressions designed to resolve to True for argument lists posessing must-have features.\nIf any calling scope encompasses a ''-local'' … ''-endlocal'' block with an ''-onfail'' section, the exception is caught and further processing resumes in the `-onfail` section. Otherwise `-check` uses its argument for the exception message and exits G'MIC.\nSince 2.6, `-check` no longer directly tests for file system objects; use math expressions `isfile()` or `isdir()` in the math expression instead.\nConsider using ''-error'' if a custom message is desired. Since `-error` unconditionally throws exceptions, combine it with conditional commands to emulate `-check,` but in a less compact way.
= examples
## Examples
===
~~~
$ gmic check 0 echo 'Done!'
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ *** Error *** Command 'check': Expression '0' evaluated to false.

$ gmic check 1 echo 'Fooooo!'
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Fooooo!
[gmic]-0./ End G'MIC interpreter.
~~~
===
`-check` throws an exception immediately if its argument is False; G'MIC does not operate on the remainder of the pipeline. Instead, `-check` commences to exit the scopes in which the pipeline may be embedded. Should any of those scopes reside in an ''-onfail'' section of a ''-local'' … ''-endlocal'' block, then G'MIC resumes processing in that section. Otherwise, `-check` echoes its argument in the shell log and G'MIC quits. `-check` performs no operation if its argument is True.
===
~~~
display_graph : check "${1=0}>=0 && ${2=0}>=0" …
dg : check "${1=0}>=0 && ${2=0}>=0" skip ${3=1},${4=0},${5=0},${6=0},${7=0},${8=0},"${9=x-axis}","${10=y-axis}"…
~~~
===
Very frequently, `-check` constitutes the first line in [custom command definitions](https://gmic.eu/reference/adding_custom_commands.html#top), its argument a sanity-checking math expression. These test arguments for properties upon which the custom command depends. In these examples, `-check` takes one argument, a string, which G'MIC processes as a [math expression](https://gmic.eu/reference/mathematical_expressions.html#top), substituting the results of the expression for the string. `-check` interprets non-zero math expression results as True, and G'MIC proceeds with the rest of the pipeline. Zero-results are False and `-check` throws an exception, using its argument string as the exception message.
Use ''-skip'' with ''-check'' to set custom command arguments to default values, but exclude such from `-check` processing. Effectively, this creates an optional argument that has a default value.
===
__ `onfail.gmic` __
~~~
sameas :
   left=$1
   right=$2
   local
      testit $left,$right
      echo $left" is the same as "$right"."
      onfail
         echo $left" differs from "$right"."
         quit
   endlocal

testit : check "${1}==${2}"

        §§§

$ gmic onfail.gmic sameas 3,3
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input custom command file 'onfail.gmic' (2 new, total: 4447).
[gmic]-0./sameas/*local/ 3 is the same as 3.
[gmic]-0./ End G'MIC interpreter.

 $ gmic onfail.gmic sameas 4,3
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input custom command file 'onfail.gmic' (2 new, total: 4447).
[gmic]-0./sameas/*local/ 4 differs from 3.
~~~
===
Wrapping `-check` within an ''-onfail'' section of a ''-local'' … ''-endlocal'' block may lead to more sophisticated handling of thrown exceptions, not the least of which being more purpose-specific error messages or the saving of already-generated images from the effects of an inopportune exception. This approach is not peculiar to `-check` but to any circumstance where an exception is possible.

# Command reference

===
"""
gmic -h check
"""
===
"""
date -u
"""
