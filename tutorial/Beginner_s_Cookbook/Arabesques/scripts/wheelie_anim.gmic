#@cli wheelie_anim : frames-per-rev,scale,r_0,phase_0,rot_rate_0,…
#@cli : Compose arabesque rotational animation using a three image
#@cli : selection: [-3] Transparent, optionally pre-drawn, image for
#@cli : the arabesque. [-2]: four channel fader multiplier and [-1]:
#@cli : background image. The number of wheelies follows from the
#@cli : argument triplet count following "scale". A single triplet
#@cli : of three arguments specifies length, r, orientation θ and
#@cli : rotation rate of one wheelie. It is an error if the argument
#@cli : list, "less frames-per-rev" and "scale" is not divisible by
#@cli : three. Replaces selection with (1) an animation image
#@cli : sequence of a length equal to the frames_per_revolution
#@cli : argument, and (2) the arabesque transparency reflecting the
#@cli : last frame state, suitable for use as a pre-drawn image for
#@cli : successor arabesque animations.

wheelie_anim:
   # wheelie: a segment of a particular (1) radius, (2) phase
   # angle (orientation) and (3) discrete angular velocity - a
   # relative integral number of revolutions per some unspecified
   # base interval, perhaps however long one revolution
   # takes. Wheelies chain together, the tail of one situated at
   # the head of its antecedent. The first wheelie of the chain
   # centers at the origin and the last has, instead of another
   # wheelie, an attached marking pen. Thus, the entire chain
   # draws an "arabesque" as the individual wheelies rotate at
   # their respective angular velocities from their initial
   # orientations. This script animates such.
   #
   # This script renders arabesques "traditionally": Each wheelie
   # has radial, phase and angular velocity components.  For each
   # increment, and, for each wheelie, apply the angular velocity
   # increment, rotating the wheelie, then, with all wheelies
   # rotated, plot the endpoint.

   emsg="
      Select three images, to wit: [-3]: Transparent, optionally
      pre-drawn, image for the arabesque. [-2]: four channel fader
      multiplier and [-1]: three channel background image; 1:1
      aspect ratio works best."

   -if size([$[]])!=3
      -error $emsg
   -fi
   -name... arabesque
   -name..  multiplier
   -name.   background
   -resize[multiplier] [arabesque],[arabesque],[arabesque],[arabesque],1
   -remove_opacity[background]
   -store[multiplier] multiplerimage
   -local[arabesque,background]
      # Fetch an arbitrarily long argument list to $a0, $a1, …, $an
      $=a

      # Expect argument one as initial frames per revolution,
      # Expect argument two as canvas image scaler
      # followed by data triplets: radius, r, phase angle, θ,
      # angular velocity, ω.

      -check {!(($#-2)%3)}

      # Initial argument: frame count per revolution
      -check "isint($a1) && $a1>0"
      frames_per_rev=$a1
      -check isnum($a2)" && "$a2>0
      scaler=$a2

      # scaling width is the smallest dimension
      sw={min(w,h)/2}
      -if $sw%2==0
         sw+=1
      -fi

      # Circles argument vector: For each wheelie, compose
      # radius and phase arguments into a homogeneous
      # transform. In the animation loop, we compose this
      # with the "angular tick dependent" (atk) rotational
      # transform to plot the wheelie in an generic
      # plotting space.

      wcnt={round(($#-2)/3,1,-1)}
      -input $wcnt,1,1,12
      -name. args

      # Iterate over argument vector. For each triplet –
      # representing a wheelie circle – Fetch radius (rad:
      # r), phase angle (ang: θ) and angular velocity (sf:
      # ±ω) parameters.

      -repeat $#-2 j=$>
         -if   $j%3==0 # get radius
            rad=${a{3+$j}}
            -check isnum($rad)" && "$rad>=0
            -set[args] $rad,{round($j/3,1,-1)},0,0,0
         -elif $j%3==1 # get angle, degrees
            ang=${a{3+$j}}
            -check isnum($ang)" && "$ang>=0" && "$ang<=360
            -set[args] $ang,{round($j/3,1,-1)},0,0,1
         -else         # get ω and set spectral coefficient
            sf=${a{3+$j}}
            -set[args] $sf,{round($j/3,1,-1)},0,0,2
         -fi
      -done

      # Iterate over argument image, each 12 channel pixel
      # representing one wheelie. The first three channels
      # contain wheelie radius, phase angle and radial
      # velocity. Compose a homogeneous matrix
      # transforming the origin to the tip of the wheelie
      # radius, a radial translation and phase
      # rotation. Populate the nine remaining channels
      # with this matrix.

      -fill[args] ">
                     CPX=I;
                     orot=rot(          # phase rotation
                               [0,0,1],
                               deg2rad(CPX[1])
                             );
                     xlat=eye(3);
                     xlat[2]=CPX[0];    # translation
                     [                  # args+rot & xlation
                       CPX[0,3,1],      # arguments
                       mul(orot,xlat,3) # time-independent
                     ]                  # matrix
                  "
      -permute[args] cyzx
      -store[args] circles

      # Partial screenspace transform.
      ssxfrm={">
                 specw=get('sw',0,0);
                 scaler=get('scaler',0,0);
                 id=eye(3);
                 id[0]=specw/scaler;
                 id[2]=specw;
                 id[4]=-specw/scaler;
                 id[5]=specw;
                 id"}

      # Homogeneous position vectors for plotting
      # initial/final segments
      tracerim={vector3([0,0,1])}
      firstpt={vector3([0,0,1])}

      # Transparent image to plot wheelies themselves
      -input [arabesque],[arabesque],[arabesque],[arabesque]
      -name. wheelplot

      # Stash background for duplication in loop
      +store[background] back

      # Animate arabesque: 'angular tick dependent' → atk
      atk=0
      -repeat $frames_per_rev k=$>
         atk={2*pi*($k/($frames_per_rev-1))}
         -local[arabesque,background,wheelplot]
             -input $multiplerimage
             -mul[arabesque,multiplier]

             # Plot wheelie indicators: rotate wheelies
             # by their respective angular velocity
             # increments, compose this rotation into
             # the pre-computed phase,
             # radial-displacement transform from the
             # argument image, compose with screenspace
             # transform and plot via polygon()

             -eval[wheelplot] ">
             begin(
                wcnt=get('wcnt',0,0);
                omega=get('atk',0,0);
                fpr=get('frames_per_rev',0,0);
                ik=get('k',0,0);
                fpt=get('firstpt',3,0);
                trc=get('tracerim',3,0);
                pp=vector"{3*($wcnt+1)}"([0,0,1]);
                circs=get('circles',"{12*$wcnt}",0);
                repeat(
                     wcnt,k,
                     idx=wcnt-k-1;
                     rbradx=mul(
                                 rot(
                                     [0,0,1],
                                     circs[12*idx+2]*omega
                                    ),
                                 circs[12*idx+3,9,1],
                                 3
                               );
                     repeat(
                             k+1,j,
                             foo=rbradx*pp[3*(k-j),3];
                             pp[3*(k-j)]=foo[0];
                             pp[3*(k-j)+1]=foo[1];
                             pp[3*(k-j)+2]=foo[2];
                           )
                      );
                ssx=get('ssxfrm',9,0);
                repeat(
                       wcnt,k,
                       p0=ssx*pp[3*(k),3];
                       p1=ssx*pp[3*(k+1),3];
                       polygon(#$wheelplot,
                                -2,
                                [p0[0,2],p1[0,2]],
                                1,
                                0xffffffff,
                                [115,160,205,255]
                              );
                       ellipse(#$wheelplot,
                               p0[0,2],
                               1,
                               1,
                               0,
                               1,
                               [230,90,45,255]
                              );
                     );
                plt=ssx*pp[0,3];
                ik>0?
                   polygon(#$arabesque,
                           -2,
                           [plt[0,2],trc[0,2]],
                           1,
                           0xffffffff,
                           [255,200,100,255]
                          ):
                   store('firstpt',plt,3,1,1,1);
                store('tracerim',plt,3,1,1,1);
                ellipse(#$wheelplot,
                        plt[0,2],
                        2,
                        2,
                        0,
                        1,
                        [230,90,45,255]
                       );
                ik==(fpr-1)?
                   polygon(#$arabesque,
                           -2,
                           [fpt[0,2],plt[0,2]],
                           1,
                           0xffffffff,
                           [255,200,100,255]
                          )
                  )
                              " # end of eval
             -blend[background] [arabesque],alpha
             -blend[background] [wheelplot],alpha
             -mul[wheelplot] 0
             -mv[background] 0
             -name[background] frame-$k
         -done # local environment
         -input[-2] $back
      -done # repeat frames per 360° revolution
      -rm[wheelplot,background]
   -done # local argument environment of [arabesque,background]

#@cli durga : _radius_0,_phase_0,_angular_velocity_0,…
#@cli : Sequence a series of animations by successively adding
#@cli : wheelies, one at a time, starting with the initial wheelie
#@cli : that just generates a circular arabesque. Furnish any number
#@cli : of wheelie triplets in the argument list, or leave that list
#@cli : empty; durga will generate a list of five randomly composed
#@cli : wheelies. Selected image sets the animation size and
#@cli : background composition. Framerate is fixed at 24
#@cli : frames/second. Select the background image to set animation
#@cli : frame size. Arguments should be in groups of three: radius,
#@cli : phase, angular velocity.

durga : -skip "${1=}"
   emsg="Select the background image to set animation frame size.
         Arguments should be in groups of three: radius, phase,
         angular velocity."
   frames={24*6}
   -local[]
      is_arg={isnum("$1")}
   -onfail
      is_arg=0
   -done
   -if size([$[]])==0
      -input 300,300,1,3,lerp([200,200,230],
                              [230,200,200],
			      y/(h-1)
			     )
   -fi

   # Create, get construction images
   -name. background
   -remove_opacity[background]
   -input[-2] (0.99^0.94^0.92^0.998)
   -name.. multiplier
   -input[-3] [background],[background],[background],4
   -name... arabesque

   # Wheelie arguments?
   -if $is_arg>0
      -if $#%3==0
         $=a
         wcnt={$#/3}
         ra=''
         ph=''
         av=''
         -repeat $# j=$>
            -if $j%3==0 # get radius
                   rad=${a{1+$j}}
               -check isnum($rad)" && "$rad>=0
               ra={[[$ra],[$rad]]}
            -elif $j%3==1 # get angle, degrees
               ang=${a{1+$j}}
               -check isnum($ang)" && "$ang>=0" && "$ang<=360
               ph={[[$ph],[$ang]]}
            -else         # get ω and set spectral coefficient
               sf=${a{1+$j}}
               -check isint($sf)
               av={[[$av],[$sf]]}
            -fi
         -done
         ra={[$ra][1,size([$ra])-1,1]}
         ph={[$ph][1,size([$ph])-1,1]}
         av={[$av][1,size([$av])-1,1]}
      -else
         -error $emsg
      -fi
   # No arguments. Make up our own. Fixed at
   # 5 wheelies, no phase displacement.
   -else
      wcnt=5
      ra={u(vector$wcnt(1))}
      ph={vector$wcnt(0)}
      av={"
             rad=u(k=vector$wcnt(1.5))-0.75;
             sgn=2*round(rad,1,1)-1;
             mag=sort(abs(5*rad),1);
             rmag=round(mag/min(mag),1,1);
             rmag*sgn
         "}
   -fi

   args=""
   +store[multiplier,background] animback
   -repeat {$wcnt} i=$>
      -local[arabesque,multiplier,background]
         acnt={size([$args])}
         wcount={$acnt/3}
         newargsz={$acnt+3}
         args={"
                 RA=get('ra',$wcnt,0);
                 PH=get('ph',$wcnt,0);
                 AV=get('av',$wcnt,0);
                 RL=RA[0,$wcount+1,1];
                 scale= 1.0/sum(RL);
                 RL=round(RL*scale,0.01,0);
                 NAR=vector$newargsz(0);
                 repeat($wcnt+1,k,
                        NAR[3*k]=RL[k];
                        NAR[3*k+1]=PH[k];
                        NAR[3*k+2]=AV[k]
                       );
                 NAR
              "}
         -wheelie_anim[arabesque,multiplier,background] $frames,1.125,$args
         -input $animback
      -done
   -done
   -remove[arabesque,multiplier,background]
