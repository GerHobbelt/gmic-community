#! /usr/bin/gmic

#@cli gtutor_mkchainanim : [spectral] (2chan-float:complex),_frame_count (+integer>0, default: 300),_lowpass_cut-off (+integer>0, default: 32 Hertz)
#@cli : Make an animated graphic of a wheelie chain plotting a
#@cli : line drawing. § Argument 1 is a 1D spectral domain
#@cli : image, 1×2n×1×2 dimensions, encoding the line drawing
#@cli : and from which the animated wheelie chain derives. ½
#@cli : the height of the spectral image, n, reflects the
#@cli : Nyquist Sampling rate of the spectral data set. This
#@cli : spectral image typically comes from a discrete time,
#@cli : forward Fourier transform (fft) of 2D path plots; these
#@cli : are taken to be [real,imaginary] position vector
#@cli : coordinates plotting the line drawing on the complex
#@cli : plane. § Argument 2, a positive integer, sets the
#@cli : number of constituent frames and defaults to 300. Such
#@cli : a number accounts for about thirty seconds at ≈29.97
#@cli : frames per second. § Argument 3, a positive integer,
#@cli : sets the low frequency passband width in Hertz; its
#@cli : useful range is 1 - n–1. Lower passband settings
#@cli : supress high frequency content in the line drawing's
#@cli : path, giving rise to low-resolution, "loopy" paths. §
#@cli : The selected image establishes the format of
#@cli : animation. It serves as a backplate for a series of
#@cli : Porter/Duff over operations. Backplate imagery
#@cli : persists, unanimated, throughout the run. § The command
#@cli : leaves on the list a series of images tagged with the
#@cli : name 'frame', constituting the animated output.
#@cli : $ -input_csv art.csv,0 s. x -fft[-2,-1] a[-2,-1] c 600,600,1,3 mkchainanim. .. o[frame] out.mp4

gtutor_mkchainanim : -check ${"is_image_arg $1"}" && ${2=300}>0 && ${3=32}>0"
 -echo[^-1] "Output a delta wheelie chain animation with $2 frames, derived from a $3 Hertz low frequency pass band."
   -pass$1
   -name[0] canvas
   -name[1] spectral
   fcnt=$2
   wcnt=$3

   # Scale and clear zero frequency, eliding any
   # offset from the complex plane origin. As a
   # consequence, the root wheelie originates
   # at the origin.

   -div[spectral] {h#$spectral}
   -eval I[#$spectral,0]=vector2(0)

   # Image 'coefficients' for dynamic array (da);
   # storage for frequency domain ordinals

   0
   -name. coefficients

   # Scan spectral image and set 'wfound' to the count of
   # non-zero, (meaningful) coefficients. Note that many
   # coefficients in the spectral image may have zero-length
   # and, thus, no bearing on the arabesque. The dynamic
   # array ('coefficient') acquires the non-zero
   # coefficients, converted to polar form (r ∠ θ). Scan
   # alternately down the counterclockwise (m%2==0) and
   # clockwise (m%2!=0) portions of the frequency axis,
   # toward the Nyquist Sampling Rate mid-point. 'o' obtains
   # the rotational rate in each loop; 'j' is the index to
   # the currently assayed ordinal — it alternates between
   # clockwise and counterclockwise indices; 'm' is the
   # loopcounter.

   wfound={">
            wc=get('wcnt',0,0);
            sz=0;
            repeat(2*wc,m,
                   sw=h#$spectral;
                   if(
                      m%2==0,
                      j=int(m/2)+1;
                      o=j,
                      j=sw-(int(m/2)+1);
                      o=-(int(m/2)+1)
                     );
                   rad=norm2(I(#$spectral,0,j));
                   if(rad>0,
                      ang=atan2(
                                 i(#$spectral,0,j,0,1),
                                 i(#$spectral,0,j,0,0)
                               );
                      ang<0?ang=ang+2*pi;
                      da_push(#$coefficients,[rad,ang,o])
                    );
                  );
            da_size(#$coefficients)
           "}

   -if $wfound

      # The coefficient array (da) may still be
      # manipulated as an image; we strip the penultimate
      # and last pixel of the dynamic array image,
      # containing administrative size and capacity
      # counts. The remaining three channel image contains
      # a permutation of non-zero cardinal sum
      # coefficients: radius (channel zero), orientation
      # (channel 1) and rotational rate (channel 2). By
      # virtue of our "ends-to-the-middle" scan, we have
      # prepared a coefficient permutation where the
      # rotational rates alternate in sign and increase in
      # magnitude.
 
      -crop[coefficients] 0,0,0,0,0,{$wfound},0,3
      -shift[coefficients] 0,1,0,0,0

      # During animation, rotors spin delta 
      # wheelies by fixed angular increments.
 
      -split[coefficients] c,2
      -name. rotors
      -fill[rotors] "begin(framecount=get('fcnt',0,0));
                     [i(0,y,0,1),(2*pi*i(0,y,0,0))/framecount]"

      # Backplate imaging: Generate arabesque
      # from the spectral image. This is a reference
      # image to compare what delta wheelie chain
      # draws.
      -mul[spectral] {h#$spectral}
      +split[spectral] c
      -ifft[-2,-1]
      -append[-2,-1] c
      -name. plots
      -fill[plots] "begin(
                           sw=min(w#$canvas,h#$canvas)/2;
                           id=eye(3);
                           id[0]=sw;
                           id[2]=sw;
                           id[4]=-sw;
                           id[5]=sw;
                           store('amat',id,3,3)
                         );
                         (id*[I(x,y),1])[0,2]
                   "
      -permute[plots] cyzx
      -eval "PV=crop(#$plots);
             polygon(#$canvas,
                     -int(size(PV)/2),
                     PV,
                     0.375,
                     0xaaaaaaaa,
                     75,85,110,255
                    )"
      -remove[spectral,plots]
      -store[canvas] canvastemplate

      # Plot storage for tracing wheelie
      # chain tip.
      -input[0] 1,$fcnt,1,2
      -name[0] trace

      # Animation loop…
      -repeat $fcnt k=$>
         +split[coefficients] c
         -polar2complex[-2,-1]
         -append[-2,-1] c
         -cumulate[-1] y
         -crop[-1] 0,0,0,0,0,{2*h-1},0,{s-1},3
         -name. dwchain
         -fill[dwchain] "begin(id=get('amat',9));(id*[I(x,y),1])[0,2]"
         -eval I(#$trace,0,$k,0)=I(#$dwchain,0,h#$coefficients-1)
         -input[trace] $canvastemplate
         -if $k>0
            # Trace wheelie tip

            +crop[trace] 0,0,0,0,0,$k,0,1
            -crop[-1] 0,0,0,0,0,{2*h-1},0,{s-1},3
            -permute[-1] cyzx
            -eval "PV=crop(#-1);
                   sz=size(PV);
                   polygon(#$canvas,
                           -int(sz/2),
                            PV,
                            1.00,
                            0xffffffff,
                            40,50,50,255
                          )"
            -remove[-1]
         -fi

         # Trace wheelie chain.
         -permute[dwchain] cyzx
         -eval "PV=crop(#$dwchain);
                sz=size(PV);
                polygon(#$canvas,
                        -int(sz/2),
                             PV,
                             1.00,
                             0xffffffff,
                             60,100,200,255
                       )"

         # Draw "hinges".
         -eval "PV=crop(#$dwchain,0,0,0,0,2,h#$coefficients,1,1);
                sz=size(PV);
                for(j=0,
                    j<(sz/2),
                    j++,
                    ellipse(#$canvas,
                            PV[2*j,2],
                            1.5,
                            1.5,
                            0,
                            1,
                            240,25,210,255
                           )
                    )"
         -remove[dwchain]
         -name[canvas] frame
         -add[coefficients] [rotors]
      -done # Animation loop

      # Remove all, keeping just images
      # labeled 'frame'.
      -remove[^frame]
   -else
      -error "Spectral image argument has no coefficients."
   -fi
