#@cli gtutor_fwheelie : radius₀,orientation₀,angular_velocity₀…
#@cli: Compose an arabesque from a chain of delta wheelies, a
#@cli: series of triplets, each consisting of a radial
#@cli: (+float), orientation (±degrees, float) and rotational
#@cli: rate (±integer) data. Draw the corresponding arabesque
#@cli: on the selected images.
#@cli: $ -input 1024,1024,1,1 name. tricircle gtutor_fwheelie[tricircle] 0.5,67,1,0.25,0,-3
gtutor_fwheelie : -check "!(($#)%3)"
   -echo[^-1] "Draw on selected image$? the arabesque derived from the "{($#)/3}" given delta wheelies."    
   -foreach {
      specw={int(min(w,h)/2)}
      -gtutor_mkspectral $specw,$*
      -gtutor_specplot[0] [-1]
      -remove. 
   }

#@cli gtutor_mkspectral : spectral_width,radius₀,orientation₀,angular_velocity₀…
#@cli: Generate a two channel discrete frequency domain image
#@cli: corresponding to the supplied delta wheelie parameters:
#@cli: +r, ±θ and ±f on the command line, one triplet for each
#@cli: delta wheelie. Image suitable as a gtutor_specplot
#@cli: selection, which draws the arabesque.
#@cli: $ gtutor_mkspectral 512,0.5,90,1,0.25,0,-3,0.125,0,-5 1024,1024,1,1 gtutor_specplot. [-2] rm..
gtutor_mkspectral: -check "isint(${1}) && ${1}>0 && !(($#-1)%3)"
   -echo[^-1] "Generate spectral domain image given "{($#-1)/3}" delta wheelies."
   # Expect spectral width followed by data triplets $a1,$a2,$a3…
   dwheelcnt={($#-1)/3}
   specw=$1
   -input 3,1,1,$dwheelcnt,${2--1}
   -name. args
   -store[args] deltawheelies

   #coeffcient image: 'carray'
   -input $specw,1,1,2
   -name. carray
   -store[carray] coefficientarray

   # Find canonical sum by aggregating delta wheelies.
   # Insert terms into spectral image using rotation
   # rate as spectral coordinates.
   # Σf -> $accsf; Σθ → $acca
   -eval "const wc=$dwheelcnt;
          const sw=$specw;
          dw=get('deltawheelies',wc*3);
          ca=get('coefficientarray',sw*2);
          acca=0;
          accsf=0;
          repeat(wc,k,
                 r=dw[3*k];
                 acca+=deg2rad(dw[3*k+1]);
                 accsf+=dw[3*k+2];
                 aidx=accsf%sw;
                 ca[aidx]+=r*cos(acca);
                 ca[sw+aidx]+=r*sin(acca);
                );
          store('coefficientarray',ca,sw,1,1,2)"

   # carray: frequency domain image generated
   # from the given delta wheelie chain.
   -input $coefficientarray
   -name. carray
   
   # Scale freq. domain by domain length.
   -mul[carray] $specw

#@cli gtutor_specplot : [spectrum]
#@cli: Generate an arabesque on selected images from
#@cli: the given argument: a frequency domain spectrum image.
#@cli: $ -input (0,0,0,0,0^1,0,0,{0.625*cexp([0,90°])}^{-1%256},0,0,0,0^{-2%256},0,0,{0.375*cexp([0,90°])}^7,0,0,{0.125*cexp([0,90°])}^{-6%256},0,0,{0.0625*cexp([0,90°])}) -permute. cyzx -pointcloud. , -mul. {w/2} -input 600,600,1,1 -gtutor_specplot. [-2] -remove.. -name. Pickelhaube
gtutor_specplot : -is_image_arg $1 gotimg=${} -check "$#==1 && $gotimg"
    -echo[^-1] "Generate an arabesque on image$? given spectral domain coefficients in "${1}"."
    pass$1 0 
    -name. carray
    # Frequency domain → time domain
    -split[-1] c
    -ifft[-2,-1]
    -append[-2,-1] c
    -name. temporal
    -foreach[^temporal] {
        pass[temporal] 0
        sw={min(w#-2,h#-2)}
     
        # Screenspace transform.
        -fill[temporal] ">
                         begin(
                                specw=$sw/2;
                                id=eye(3);
                                id[0]=specw;
                                id[2]=specw;
                                id[4]=-specw;
                                id[5]=specw;
                              );
                         (id*[I(x,y),1])[0,2];
                       "
        -permute[temporal] cyzx
        -eval "PV=crop(#$temporal);
               polygon(#-2,
                        -int(size(PV)/2),
                        PV,
                        1,
                        0xffffffff,
                        255
                      )
              "
        -keep[-2]
     } #foreach[^temporal]
     -remove[temporal]
