# spectral_width,radius_0,angle_0,angular_velocity_0[,radius_1,angle_1,angular_velocity_1],…
fwheelie :
   $=a

   # Expect data triplets
   -check {!(($#-1)%3)}

  sw={$a1/2}
   -if $sw%2==0
      sw+=1
   -fi

   # Two row vectors for real and imaginary frequency domain samples. Size from first
   # argument
   -input $sw,1,1,2
   -name. carray

   # Fetch and check diameter, phase angle and angular velocity parameters
   accsf=0
   acca=0
   -repeat $#-1,j
      -if   $j%3==0 # get radius
         rad=${a{2+$j}}
         -check isnum($rad)" && "$rad>=0
      -elif $j%3==1 # get angle, degrees
         ang=${a{2+$j}}
         -check isnum($ang)" && "$ang>=0" && "$ang<=360
         acca+=$ang
      -else         # get ω and set spectral coefficient
         sf=${a{2+$j}}

         accsf+=$sf
         -if $accsf<0
            sf={($sw+$accsf)%$sw}
         -elif $accsf>=0
            sf=$accsf
         -fi

         rr={$rad*cos(deg2rad($acca))}
         ir={$rad*sin(deg2rad($acca))}
         -set[carray] {$rr+i(#0,$sf,0,0,0)},$sf,0,0,0
         -set[carray] {$ir+i(#0,$sf,0,0,1)},$sf,0,0,1
      -fi
   -done
   -mul[carray] $sw
   
specplot :
   # Frequency domain → time domain
   -name. carray
   -split[carray] c
   -ifft[-2,-1]
   -append[-2,-1] c
   -name. temporal
   sw={w#$temporal}

   # Screenspace transform.
   fill[temporal] ">
                    begin(
                           specw=w#$temporal;
                           id=eye(3);
                           id[0]=specw/1.5;
                           id[2]=specw;
                           id[4]=-specw/1.5;
                           id[5]=specw;
                         );
                    hco=id*[I(x,y),1];
                    hco[0,2]
                  "
   -permute[temporal] cyzx
   -input {2*$sw},{2*$sw},1,1
   -name. canvas
   eval[canvas] ">begin(PV=crop(#0);polygon(#-1,-s#0,PV,1,0xffffffff,255))"
   keep[canvas]
