#@cli fwheelie : spectral_width,radius_0,angle_0,angular_velocity_0…
#@cli : Plot a two channel image of the discrete frequency domain
#@cli : that generates the arabesque corresponding to the supplied
#@cli : wheelie parameters, r, θ and ±ω triplet(s) on the command
#@cli : line. (1) width and height of the phase plot portraying
#@cli : the wheelie (2...) r, θ, ±ω triplets, length, degrees
#@cli : orientation and revolutions +ω (counterclockwise) or -ω
#@cli : (clockwise); one triplet for each wheelie. Fwheelie leaves a
#@cli : ½(spectral_width+spectral_width%2?0:1),1,1,2 image on the
#@cli : list with plotted wheelie sums as complex frequency domain
#@cli : ordinals; channel 0 real and channel 1 imaginary. Image
#@cli : suitable as a specplot selection, which generates the phase
#@cli : plot.

fwheelie :
   # Pseudo assignment expands to command line arguments
   $=a

   # Expect data triplets $a1,$a2,$a3…

   -check {!(($#-1)%3)}

   # Phase plot is 2*$sw × 2*$sw for mapping to
   # [-1…1] on a side in the complex plane; force $sw odd.

   sw={$a1/2}
   -if $sw%2==0
      sw+=1
   -fi

   # carray: Two row vectors for real and imaginary
   # frequency domain ordinals. Size from first argument.

   -input $sw,1,1,2
   -name. carray

   # Fetch and check diameter, phase angle and angular
   # velocity parameters. Aggregate Σω -> $accsf; Σθ → $acca

   accsf=0
   acca=0

   # Iterate over arguments; populate carray and aggregate.

   -repeat $#-1 j=$>
      -if   $j%3==0 # get radius r
         rad=${a{2+$j}}
         -check isnum($rad)" && "$rad>=0
      -elif $j%3==1 # get angle, θ, degrees
         ang=${a{2+$j}}
         -check isnum($ang)" && "$ang>=0" && "$ang<=360
         acca+=$ang
      -else         # get ω, revolutions
         sf=${a{2+$j}}

         accsf+=$sf
         -if $accsf<0
            sf={($sw+$accsf)%$sw}
         -elif $accsf>=0
            sf=$accsf
         -fi
         # Ordinal components via Σθ, then populate freq. dom.
         rr={$rad*cos(deg2rad($acca))}
         ir={$rad*sin(deg2rad($acca))}
         -set[carray] {$rr+i(#0,$sf,0,0,0)},$sf,0,0,0
         -set[carray] {$ir+i(#0,$sf,0,0,1)},$sf,0,0,1
      -fi
   -done

   # Scale freq. dom. by dom. length - for ifft.
   # carray: frequency domain image generated from
   # the given wheelie chain.
   
   -mul[carray] $sw

#@cli specplot : 
#@cli : Generate a phase plot from the selected frequency
#@cli : domain image.

specplot :
   -foreach
     {
        # Frequency domain → time domain
        -name. carray
        -split[carray] c
        -ifft[-2,-1]
        -append[-2,-1] c
        -name. temporal
        sw={w#$temporal}
     
        # Screenspace transform.
        -fill[temporal] ">
                         begin(
                                specw=w#$temporal;
                                id=eye(3);
                                id[0]=specw;
                                id[2]=specw;
                                id[4]=-specw;
                                id[5]=specw;
                              );
                         (id*[I(x,y),1])[0,2];
                       "
        -permute[temporal] cyzx
        -input {2*$sw},{2*$sw},1,1
        -name. canvas
        -eval[canvas] "begin(
                              PV=crop(#$temporal);
                              polygon(
                                       #$canvas,
                                       -int(size(PV)/2),
                                       PV,
                                       1,
                                       0xffffffff,
                                       255
                                     )
                            )"
        -keep[canvas]
     }
