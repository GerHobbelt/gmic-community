# Mathematical Expressions
Mathematical expressions operate in three settings:
| 1.  |Furnish logical flags for flow control commands. See [Example One](#examone)
| 2.  |Iterate over images for examining, changing or initializing rasters. See [Example Two](#examtwo)
| 3.  |Initialize pipeline variables or provide command arguments. See [Example Three](#examthree)

They cannot be invoked outside of these settings. Yet when invoked, mathematical expressions put forward a complete programming language, one operating in environments where rasters of any number of images may be directly accessed, or where the environment itself may be queried independently of any image. Where G'MIC pipeline commands operate on the whole — the image indivisible — mathematical expressions operate from the image _within_, on the very bitmaps comprising images. Should the aim be one of operating on the image raster itself — perhaps applying a specialized convolution kernel or gathering metrics not available from image summaries — then stage your efforts in the mathematical expression environment. Examples follow.
= examone
__Example One:__
You want to produce an output conditioned on an image feature:

|-%% 256,256,1,3 noise. 32,0 n. 0,255 do b. 1,1 while iv>4  %%|`reducevariance: -skip ${1=256},${2=5},${3=5}`\n   `sz,nlevel,cutoff=${1-3}`\n   `-input $sz,$sz,1,3`\n   `-name noisy`\n   `-noise[noisy] $nlevel,0`\n   `-normalize[noisy] 0,255`\n   `-do`\n      `-blur[noisy] 1,1`\n   `-while iv>$cutoff`\n   `-echo "Image\ Variance:\ "{iv}`
|    |*Mostly invariant variance*

| 1.  |A [Mathematical Expression](https://gmic.eu/index.html), `iv>$cutoff` asserts a ''-do'' … ''-while'' exit condition when it flags `False`; iterative image blurring ceases when the current image's variance, the predefined math expression variable `iv`, falls beneath a supplied `$cutoff` level.
| 2.  |G'MIC's pipeline interpreter dereferences the key `$cutoff` and substitutes its value in the expression _before_ the evaluation of the math expression itself; the mathematical expression parser does not see `iv>$cutoff`, but, `iv>0.8125` instead for a user-supplied third argument, say: `0.8125` for illustration. See the [Substitution Cheat](https://gmic.eu/tutorial/subs_cheat.html).
| 3.  |Except in a few corner cases, such as an empty image stack, mathematical expressions operate with respect to a reference image; its features stage the environment in which mathematical expressions operate — in particular, setting a host of predefined variables reflecting image metrics such as `iv` (variance) or `ia` (median value). This reference image may be explicitly given by an image list index, preceeding and comma-separated from the mathematical expression. In the absence of such, the reference image defaults to the last item on the stack and is undefined if the stack is empty.
= examtwo
__Example Two:__
You want to produce an image reflecting the averaged, absolute differences of luminance between pixels and their immediate ±x-axis neighbors.
~~~
xdiff: 
    -luminance
    -fill. (abs((j(-1,0)-i))+abs(i-j(1,0)))/2
    -normalize. 0,255
~~~
===
|%% images/forestflowers.png r. 45%,45%,100%,100% %% | %% images/forestflowers.png r. 45%,45%,100%,100% -luminance. -f. (abs((j(-1,0)-i))+abs(i-j(1,0)))/2 n. 0,255 %%
| *Forest* | *Differed Forest*
===
———
~~~
$ gmic xdiff.gmic -input forest.png -verbose + +xdiff. -output. differed_forest.png
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input custom command file 'xdiff.gmic' (1 new, total: 4572).
[gmic]-0./ Input file 'forest.png' at position 0 (1 image 768x768x1x3).
[gmic]-1./ Increment verbosity level (set to 2).
[gmic]-1./xdiff/ Compute luminance of image [0].
[gmic]-1./xdiff/ Fill image [0] with expression '(abs((j(-1,0)-i))+abs(i-j(1,0)))/2'.
[gmic]-1./xdiff/ Normalize image [0] in range [0,255], with constant-case ratio 0.
[gmic]-2./ Output image [1] as png file 'img/differed_forestflowers.png'.
[gmic]-2./ End G'MIC interpreter.
~~~
| 1.  |Commands ''-input'', ''-fill'' and ''-eval'' each may take [pel or pixel processors](https://gmic.eu/tutorial/fill.html#math_expressions) to define, change or evaluate images procedurally. If given, `-input` repeatedly applies its fifth argument — a math expression — to each pel or pixel during image initialization. Similarly, `-fill` changes existing bitmaps in accordance to a given math expression argument, again applied to every pixel or pel in an iteration across the bitmap. Like `-fill`, `-eval` also takes a math expression, but does not alter visited pels or pixels — it just evaluates pixels with its given math expression argument and presumably appies the results to things other than bitmaps.
| 2.  |

= examthree
__Example Three:__
You want to compute a value to initialize a pipeline variable and command arguments, these based on certain characteristics of the default image. For that, use mathematical expression image features: [Substitution Expressions](https://gmic.eu/tutorial/subs_cheat.html#subexpressions).
~~~
vdiffmedian:
   +median. 20,{0,ia}
   vdiff={iv#0-iv#1}
   -echo 'Median Variation Difference: '$vdiff
~~~
———
~~~
$ gmic vdiff.gmic input forest.png r2dx. 45%  -vdiffmedian.
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input custom command file 'vdiff.gmic' (1 new, total: 4581).
[gmic]-0./ Input file 'forest.png' at position 0 (1 image 768x768x1x3).
[gmic]-1./ Resize 2D image [0] to 45% pixels along the x-axis, while preserving 2D ratio.
[gmic]-2vdiffmedian/ 'Median Variation Difference: '634.59960887090256
…
~~~
===
| %% images/forestflowers.png r2dx. 45% %% | %% images/forestflowers.png r2dx. 45% median. 20,{0,ia} %%
| *Forest* | *Semi-median Forest*
===
Substitution expressions, directives bracketed in curly braces, induces G'MIC's pipeline interpreter to examine the bracketed string, which determines the substitution taking place; G'MIC replaces the substitution expression with a value, this according to the directive. See [Of the possible substitution expressions, those pertaining to _image features_ specifically return information about images. These substitution expressions take the form `{` _image index_, _<feature>_ `}`, the _<feature>_ is a one-letter directive requesting a specific image feature. The first argument identifies the specific image being queried. For example, 