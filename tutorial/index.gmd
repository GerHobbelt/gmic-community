# Start Here

| ![prompt](images/prompt.mp4)|There it is. The *Prompt*.\n\nPregnant with possibilities, but — _What the futz do you do with it???_ \n\nCould be there is something you want to do with an image. Like, fix it. Get rid of the scratches. The dust motes. The coffee (maybe tea) stain that came from setting a cup down on a cluttered breakfast table decades ago, right on the corner of the print.\n\nAnd, it's the only print you have. The negative went into a box, and the box went into an attic, and the house to which the attic belonged was sold a long time ago.\n\nAnd the print — it's your last connection with Aunt May, that dear, sweet woman who pretended not to notice when your hand slipped into the cookie jar, decades ago, before the house was sold.

What you wouldn't give to sit down with Aunt May one more time, some sunny Sunday morning, and talk about — oh, maybe nothing at all. Talk about nothing at all while the kitchen fills with the warm smell of baking cookies. The kitchen of that quaint, old Victorian gingerbread, now long ago gone.

You have a _visual goal:_ Fix Aunt May's print. You've scanned and archived it and can go back to the archive at any time should you fail to fix it in a catastrophic way. That's good.

Now, here's the difficulty: you have no G'MIC vocabulary. You can't connect your visual goal with G'MIC commands.

You're in the project directory. You have your Aunt May print. You have no idea what to do next. So you throw a _Hail Mary!_ pass:
===
~~~
$ gmic auntmay_oldphoto.png

[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input file 'auntmay_oldphoto.png' at position 0 (1 image 512x512x1x3).
[gmic]-1./ Display image [0] = 'auntmay_oldphoto.png'.
[0] = 'auntmay_oldphoto.png':
  size = (512,512,1,3) [3072 Kio of float32].
  data = (118,126,112,109,105,109,108,111,107,119,121,121,(...),122,124,123,123,128,127,124,124,124,127,125,114).
  min = 46, max = 188, mean = 153.775, std = 17.9073, coords_min = (511,456,0,0), coords_max = (130,216,0,2).
~~~

%% images/auntmay_oldphoto.png r. 67%,67%,100%,100%,5 %%
===
*Imgcreator-AI — [zmo.ai](https://www.zmo.ai)*

Ah! Stuff happened! A bunch of text. And the picture!

Can't seem to do anything with it though. Mouse over it and get a readout. Drag and select a box to magnify. Hit some keys. Nothing happens.

So — now what?

So — Here's the first bit: G'MIC doesn't do Windows, Icons, Mouse Pointer clicky stuff. It mostly does Old School shell. Uncle Ken hunched in front of a VT-100, back in the days of DEC. If you are not keen on shells, then — ehhhh… — you are going to have a tough time with G'MIC. 

But — you can get past that. Good.

Here's the next bit: What you write after `gmic` in the shell is a _pipeline_. Pipelines are ordered command sequences. They operate on _image lists_. Some people call image lists _stacks_.

Put some pins in those. Image lists and pipelines live in G'MIC's very core. The [Intro Cheat](https://gmic.eu/tutorial/cheatsheet.html) takes a deeper dive on this duality. You have operated with it already. You got Aunt May on the stack. She got there because you entered her picture with the ''-input'' command.

Wait — What? You never typed `input`??!

Here's the deal: G'MIC sometimes throws its own 'Hail Mary' passes. If it encounters an incomplete pipeline, such as the one you wrote, it sticks an implied `input` command in front of what it guesses to be an image argument. Another Hail Mary that G'MIC throws is when no particular output has been specified. G'MIC appends ''-display'' commands at the end of pipelines that seem not to have outputs.

So, in this case, everything worked out. You wrote your very first pipeline: `-input auntmay_oldphoto.png -display`, and stumbled into your first success.

But — you don't just want to stumble onto successes. You want to _have successes_. Every Day. All the Way.

So now, lets pull the pins. Pipelines start with commands that, at the first go, put images on the image list.

The image list (stack) is like a kitchen counter. You put stuff there until you can work on them. G'MIC assigns images unique positional numbers as commands enroll them onto the image list. You can reference images with these __indices__. You can direct commands to work on specific images through [Selection Decorators](https://gmic.eu/tutorial/command_decorations.html#image_selection).

The G'MIC commands embody image processing work. There are a little over nine hundred of them in the official distribution. Maybe more than a thousand if you count community contributions.

At the moment, you know something about two: ''-input'' and ''-display''. It's a start.

Here's a couple more: ''-output'' and ''-normalize.'' ''-output'' let's you save images. Even if [that doesn't make much sense](https://gmic.eu/tutorial/images_as_data_sets.html).

You now have enough to do a little finger exercise. Let's fix up Aunt May a little bit, shall we? Type this at a shell prompt:
===
~~~
$ gmic -input auntmay_oldphoto.png -normalize. 0,255 -output. auntmay_normed.png

[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input file 'images/auntmay_oldphoto.png' at position 0 (1 image 512x512x1x3).
[gmic]-1./ Normalize image [0] in range [0,255], with constant-case ratio 0.
[gmic]-1./ Output image [0] as png file 'auntmay_normed.png' (1 image 512x512x1x3).
[gmic]-1./ End G'MIC interpreter.
~~~

%% images/auntmay_oldphoto.png r. 67%,67%,100%,100%,5 n. 0,255 %%
*Aunt May, normalized from zero to two hundred, fifty-five.*
===
Ah. The old girl has a little more punch now. Still a mess, but progress. A little victory.

What do you think happened? No. We're not going to tell you. The purpose of finger exercises is to stretch yourself a little bit. Rummage around here. See what you can find. Notice that some words and phrases __are in dark type.__ These link to other tutorials, reference documentation, whatever the tutorial authors think is useful for you to know. Follow these, but don't just read, like a lump on a log. Do finger exercises.

Finger exercises. They build command vocabulary so you can better connect your visual goals to gmic pipelines. How many finger execises? _Lots_ and __lots!__. Maybe three or four hundred per year — one finger exercise per day. Ah! You mean you have a _day job???_ How unfortunate. But I suppose you have to eat, pay rent and such. Then try for one finger exercise a week. Fifty or sixty in the next year. Any slower than that and — don’t take this unkindly! — you’re not serious. That’s also fine. One of the best bits of education this writer had ever received, back in the halcyon college days, and — late again! with one assignment or another — was the professor’s sigh. Then the pitch: “You know? People always find time to do what they really want to do.”

Procrastination is instructive. It’s how your head tells you who you are.

So — if you are going to stick with this, do finger exercises. You're a digital artist now. Look around you, at textures, surfaces, [The G'MIC Gallery](https://gmic.eu/gallery/), clothing fabric, [Funny Oneliners](https://gmic.eu/reference/funny_oneliners.html#top), fields of grass. Can you write a pipeline that renders (maybe somewhat faux) versions of these? Yes, you can. Keep the goals simple at first; challenge yourself to come up with pipelines that realizes those goals.

Now, here is what you have in Tutorial Land


|-''Introduction''|A historical introduction. Read it when you need a break from finger exercises.
|''Basics''|Everything here, but a deeper dive. 
|''Images''|What an image looks like to G'MIC. 
|''Command Decorations''|Make sure commands only work on the images you want them to work on.
|''Math''|It started out as an image calculator. It became a programming language.
|''Beginner's Cookbook''|Fake hair. Crazy blurs. Tiles. Arabesques. Thing is, you have to be fairly advanced before you reach the Beginner's level.
|''Command Guide''|Tutorials written around not nearly enough commands.
|''Bouncing Balls Tutorial''|Got a complicated pipeline? Turn it into a custom command. It is how G'MIC can be extended, and extended, and extended…
|''Cheatsheet''|Quick recipes to get things done.
|''Contribute''|None of this documentation wrote itself.

Updated: 12-April-2023 01:30 UTC Commit: ad0005a943af2aad4f8970323b67d96f34f97c4f
