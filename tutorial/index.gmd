# Start Here

| ![prompt](images/prompt.mp4)|Well. There it is. The *Prompt*.\n\nPregnant with possibilities, but — _What the futz do you do with it???_ \n\nSay you want to fix an old photograph. Get rid of scratches. Dust motes. The coffee (maybe tea) stain on the corner of the print. Made from setting a coffee cup down on a cluttered breakfast table — decades ago.\n\nAnd, it's the only print you have. The negative went into a box, and the box went into an attic, and the house to which the attic belonged was sold a long time ago.\n\nAnd the print — it's Aunt May, that dear, sweet woman who pretended not to notice when your hand slipped into the cookie jar, decades ago, before the house was sold. It's your last connection with her.

What you wouldn't give to sit down with Aunt May one more time, some sunny Sunday morning, and talk about — oh, maybe nothing at all. Talk about nothing at all while the kitchen fills with the warm smell of baking cookies. The kitchen of that quaint, old Victorian gingerbread, now long ago gone.

So. That's your _visual goal:_ Fix Aunt May's print. You've got a scanned and archived copy, dirt and all, in case your edits fail in a catastrophic way.

And you've got G'MIC at _The Prompt_.

Now, here's the difficulty: you have no G'MIC vocabulary. You can't connect your visual goal with G'MIC commands.

You have no idea what to do. So you throw a _Hail Mary!_ pass:
===
~~~
$ gmic auntmay_oldphoto.png

[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input file 'auntmay_oldphoto.png' at position 0 (1 image 512x512x1x3).
[gmic]-1./ Display image [0] = 'auntmay_oldphoto.png'.
[0] = 'auntmay_oldphoto.png':
  size = (512,512,1,3) [3072 Kio of float32].
  data = (118,126,112,109,105,109,108,111,107,119,121,121,(...),122,124,123,123,128,127,124,124,124,127,125,114).
  min = 46, max = 188, mean = 153.775, std = 17.9073, coords_min = (511,456,0,0), coords_max = (130,216,0,2).
~~~

%% images/auntmay_oldphoto.png r. 67%,67%,100%,100%,5 %%
===
*Imgcreator-AI — [zmo.ai](https://www.zmo.ai)*

Hey, presto! Stuff happens! A bunch of text. And Aunt May!

Now, an older, wiser you, somewhat further along in the game, might pay attention to that bunch of text. But we haven't arrived at this version of you yet. You're young. Impetuous. You have Aunt May's picture! But you can't seem to do anything with it. Mouse over it and get a readout. Drag and select a box to magnify. Hit some keys. Nothing happens.

So — now what?

So — Here's the first bit: G'MIC doesn't do Windows, Icons, and Mouse Pointers (WIMP). At least, not much. It mostly does Old School Shell. Like Uncle Ken Olsen hunched over the VT-100, back in the days of DEC. If you are not keen on shells, then you are going to have a tough time with G'MIC. 

But — lets say you can get past that.

Here's the next bit: What you write after `gmic` is a _pipeline_. Pipelines are ordered command sequences. They operate on _image lists_. Some people call image lists _stacks_.

Put some pins in those. Image lists and pipelines live at G'MIC's very core. The [Intro Cheat](https://gmic.eu/tutorial/cheatsheet.html) takes a deeper dive, but you've written a pipeline already. You got Aunt May on the stack. She got there because you entered the ''-input'' command.

Wait — What? Never typed ''-input'', you say??!

That's because G'MIC throws its own Hail Mary passes. Should it encounter an incomplete pipeline — such as the one you wrote — it sticks an implied ''-input'' command in front of what it guesses to be an image argument. Ditto with output. If G'MIC can't find anything that looks like an ''-output'' command, it punts and appends a ''-display'' command at the end of the pipeline.

Oft times, these Hail Mary passes don't work.

But — in this case — everything did. You wrote your very first pipeline: `-input auntmay_oldphoto.png -display`, and stumbled onto your first success.

However, you don't want to stumble onto successes just when stars align. You want to _have successes_. Every Time. Every Day. All the Way!

So, lets pull the pins.

| 1.  |Pipelines start with commands that, at the first go, put images on the image list.
| 2.  |The image list (stack) is like a kitchen counter. You put stuff there until you can work on them.
| 3.  |G'MIC assigns images positional numbers — _indices_ — as they enter the stack.
| 4.  |You can reference images with indices and direct commands to work on just those images by way of [Selection Decorators](https://gmic.eu/tutorial/command_decorations.html#image_selection).
| 5.  |The G'MIC commands embody image processing work. In [offical distributions](https://gmic.eu/download.html), there are a little over nine hundred of them. Maybe more than a thousand if you count community contributions.

At the moment, you know about two: ''-input'' and ''-display''. It's a start.

Here's two more: ''-output'' and ''-normalize.'' ''-output'' saves images. Even if [saving images might not work](https://gmic.eu/tutorial/images_as_data_sets.html). ''-normalize'' pegs image intensities to new minima and maxima.

You now know enough for a finger exercise. Let's fix up Aunt May — at least a little bit — by re-pegging the illumination range of the print. That is, _normalize it_. Type this at a shell prompt:
===
~~~
$ gmic -input auntmay_oldphoto.png -normalize. 0,255 -output. auntmay_normed.png

[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input file 'auntmay_oldphoto.png' at position 0 (1 image 512x512x1x3).
[gmic]-1./ Normalize image [0] in range [0,255], with constant-case ratio 0.
[gmic]-1./ Output image [0] as png file 'auntmay_normed.png' (1 image 512x512x1x3).
[gmic]-1./ End G'MIC interpreter.
~~~

%% images/auntmay_oldphoto.png r. 67%,67%,100%,100%,5 n. 0,255 %%
*Aunt May, normalized from zero to two hundred, fifty-five.*
===

Now the old girl has a little more punch. And color! Though still a mess. Yet — progress. A little victory.

What do you think happened? No. We're not going to tell you. The purpose of finger exercises is to stretch yourself a little bit. Be curious. Snoop around. Look at the process log — those lines beginning with `[gmic].` Aren't you curious about that [constant case ratio](https://gmic.eu/tutorial/normalize.html#command_reference)? [Google it](https://www.google.com/search?q=%22constant+case+ratio%22&sxsrf=APwXEdc7pOJ1M8pwpcuHR0EytrHApSF-Ew%3A1681575040797&ei=gMw6ZI2ZMNmhptQP-qqSkAc&ved=0ahUKEwiN2eCXo6z-AhXZkIkEHXqVBHIQ4dUDCA8&uact=5&oq=%22constant+case+ratio%22&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQAzIGCAAQCBAeMggIABCKBRCGAzIICAAQigUQhgMyCAgAEIoFEIYDOgoIABBHENYEELADOgUIIRCgAToFCCEQqwJKBAhBGABQyQ1Y_yZgpi1oAXABeACAAZMBiAGFApIBAzAuMpgBAKABAcgBCMABAQ), or go to the [G'MIC Discourse Sever](https://discuss.pixls.us/c/software/gmic/10) and razz on about constant case ratios. See what you can find.

Back here at Tutorial Land, notice that some words and phrases __are in dark type.__ These link to other tutorials, reference documentation, Easter Eggs, whatever the tutorial authors think might be useful. Follow these, but don't _just read_ — like some lump on a log. Above all else: ___do finger exercises!___

Finger exercises. Little pipelines that build command vocabulary. With a command vocabulary, you can better connect your visual goals to G'MIC pipelines.

What should be added to the command vocabulary? Commands with _short names_ are good candidates. Those with one or two letter spellings have longer forms but People Who Loathe Typing use short names for frequently invoked (and typed) commands. That's a pointer to the more useful — or, at leat, the more frequently used — realms. The Technical Reference's List of Commands presents a [Shortname table](https://gmic.eu/reference/list_of_commands.html#shortcuts). Start looking up those commands.

Where do finger exercises come from? If you start looking up the short name commands — any command, really — in the Technical Reference, you will discover that most conclude with examples. Those are finger exercises. Look at them. Look at what they produce. Modify the parameters. Could a [graphics program read the output](https://gmic.eu/tutorial/images_as_data_sets.html)? What would you have to do to make the results readable? Do the results align with any visual goals you may have? 

How many finger execises? _Lots_ and ___lots!___ Maybe three or four hundred per year — one finger exercise per day. Ah! You mean you have a _day job???_ How unfortunate. But you have to eat, pay rent and such. Then try for one finger exercise a week. Fifty or sixty in the next year.

Any slower than that and — don’t take this unkindly! — you’re not serious. That’s also fine. One of the best bits of education this writer ever got, back in those halcyon college days — and, _late again! with one assignment or another!_ — was the professor’s sigh. Then the lament: “You know? People always find time to do what they really want to do.”

Procrastination is instructive. It’s how your head tells you who you are.

So — if you are going to stick with this, do finger exercises. Don't wait around for people to give them to you. _You are a digital artist now_. In addition to getting finger exercises from the Technical Reference, seek them in the world. Look at textures, surfaces, [The G'MIC Gallery](https://gmic.eu/gallery/), clothing fabric, [Funny Oneliners](https://gmic.eu/reference/funny_oneliners.html#top), fields of grass. Tree bark. [Concrete Textures](https://forums.getpaint.net/topic/113576-reptorians-gmic-code-workshop/?do=findComment&comment=553909). Can you write a pipeline that renders (maybe somewhat faux) versions of these? Yes you can. Keep the visual goals simple at first; challenge yourself to come up with pipelines that realize those goals.
===
__Finger Exercises__

|-![ampstamp](images/ampstamp.png)|![xor](images/testpattern.png)
|How to [stamp ampersands all over the place?](images/cnvlv.webm)|Does this have anything to do with [this](https://gmic.eu/reference/funny_oneliners.html#xor_animation)?
|![coloredramp](images/ramp_colr.png)|![cellsandroads](images/cellsroads.png)
|How to blend one color to another?|How to make a network of roads?
===

Here is what we have in Tutorial Land. Some of it might help with decoding these finger exercises. At least a little, perhaps:

|-''Introduction''|A historical introduction. Read it when you need a break from finger exercises.
|''Basics''|Everything written here, but a deeper dive. 
|''Images''|What an image looks like to G'MIC. 
|''Command Decorations''|Limit commands to work only on the images they are supposed to work on.
|''Math''|It started out as an image calculator. It became a programming language.
|''Beginner's Cookbook''|Fake hair. Crazy blurs. Tiles. Arabesques. Thing is, you have to be fairly advanced before you reach the Beginner's level. Welcome to G'MIC, by the way.
|''Command Guide''|Tutorials written around not nearly enough commands.
|''Bouncing Balls Tutorial''|Deploy a G'MIC animated loop that exemplifies evolving or changing imagery. Comes with a behind-the-scenes look at how the script came to be: [Live G'MIC script coding](https://www.youtube.com/watch?v=UEWacWaDK8w&t=527s)   
|''Cheatsheet''|Quick recipes to get things done.
|''Contribute''|None of this documentation wrote itself.

Updated: 13-April-2023 08:02 UTC Commit: 7043fa903d8dfd5a2a9c4a9325d325a3557d82fa