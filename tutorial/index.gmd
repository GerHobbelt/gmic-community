# Start Here

| ![prompt](images/prompt.mp4)|There it is. The *Prompt*.\n\nPregnant with possibilities, but — _What the futz do you do with it???_ \n\nCould be there is something you want to do with an image. Like, fix it. Get rid of the scratches. The dust motes. The coffee (maybe tea) stain that came from setting a cup down on a cluttered breakfast table decades ago, right on the corner of the print.\n\nAnd, it's the only print you have. The negative went into a box, and the box went into an attic, and the house to which the attic belonged was sold a long time ago.\n\nAnd the print — it's your last connection with Aunt May, that dear, sweet woman who pretended not to notice when your hand slipped into the cookie jar, decades ago, before the house was sold.

What you wouldn't give to sit down with Aunt May one more time, some sunny Sunday morning, and talk about — oh, maybe nothing at all. Talk about nothing at all while the kitchen fills with the warm smell of baking cookies. The kitchen of that quaint, old Victorian gingerbread, now long ago gone.

You have a _visual goal:_ Fix the one picture you have of Aunt May. You've scanned the print photograph and have archived it. You can go back to the archive at any time if you (catastrophically) fail to fix a working copy. That's good.

Now, here's the difficulty: you do not have a G'MIC vocabulary. You cannot connect your visual goal with a coherent sequence of G'MIC commands.

You're in a project directory. You have your working copy of Aunt May. You have no idea what to do next. So you try a Hail Mary! pass:

~~~
$ gmic auntmay_oldphoto.png
[gmic]-0./ Start G'MIC interpreter.
[gmic]-0./ Input file 'auntmay_oldphoto.png' at position 0 (1 image 512x512x1x3).
[gmic]-1./ Display image [0] = 'auntmay_oldphoto.png'.
[0] = 'auntmay_oldphoto.png':
  size = (512,512,1,3) [3072 Kio of float32].
  data = (118,126,112,109,105,109,108,111,107,119,121,121,(...),122,124,123,123,128,127,124,124,124,127,125,114).
  min = 46, max = 188, mean = 153.775, std = 17.9073, coords_min = (511,456,0,0), coords_max = (130,216,0,2).
~~~
===
![AuntMay](images/auntmay_oldphoto.png)
===
*Imgcreator-AI — [zmo.ai](https://www.zmo.ai)*

Ah! Stuff happened! A bunch of text. And the picture! So you:

| 1.  |Click on the image. | Nothing happens.
| 2.  |Right-mouse-button click for the menu. | Nothing happens.
| 3.  |Look for a menu at the top of the image | What menu?
| 4.–15.  | (Try various things; ) | Nothing happens. But — moving the mouse around the image gives you some kind of coordinates — some kind of data! Hm!
| 18.  |Click-and-drag|A box! But on release, the pixels are so huge, nothing can be made out anymore.
| 17.  |Hit some keys.| Nothing happens
| 18.  |Ask, in a voice a bit too loud: "What the hell is this supposed to do??"| Nobody tells you.
| 19.  |Ask, a bit louder, "What kind of idiot #$%?heads are these G'MIC people,  anyway???"| Nobody tells you that either.
| 20.  |Click on the window manager's dismiss button|You feel better — You've got the prompt back! — but, of course, you've accomplished nothing.

Well. You can [RTFM](https://en.wikipedia.org/wiki/RTFM), but all the words makes your eyes water, it doesn't plainly say how to start, and the author seems obsessed with ampersands. Now what?

Here's the first bit: G'MIC, mostly, operates in a shell.

If you are not keen on shells, then — ehhhh… — you are going to have a tough time using G'MIC. G'MIC is a shell-based program. Period. Full stop.

OK. You can get past that. Good.

Here's the next bit: What follows the prompt is a _pipeline_. Put a pin in that. Pipelines are ordered command sequences that operate on _image list_ items. Some people call the 'image list' a _stack_.

Aunt May was on the stack. She got there because you entered her picture with the ''-input'' command.

What? You never typed `input`??!

Ah. Here's the deal: G'MIC sometimes throws its own 'Hail Mary' passes. If it encounters an incomplete pipeline, such as the one you wrote, it sticks an implied `input` command in front of what it guesses to be an argument that identifies an image location. Another Hail Mary that G'MIC throws is when no particular output has been specified. G'MIC appends a ''-display'' command to pipelines that do not seem to have outputs.

So, in this case, everything worked out. You wrote your very first pipeline: `-input auntmay_oldphoto.png -display`, and stumbled into your first success.

But — you don't want to stumble onto successes. You just want to _have_ successes. Every day, all the way.

So now, lets pull the pipeline pin. Pipelines start with commands that, at the first go, put images on the image list.

The image list (stack) is like a kitchen counter. You put stuff there until you are ready to work on things. We call it a stack because the image list itself is an ordered sequence, kind of like a "Last in, First out", queue.

G'MIC commands embody 'Work' — they do sequential image processing. There are a little over nine hundred G'MIC commands. You need a modest understanding of a few of them to start writing pipelines. Recommendations follow.

Output commands copy items on the image list off to some container, usually a file. Sometimes, that ends the pipeline, but it is not uncommon to continue on with further commands, some placing yet other images on the stack. 

|-''Introduction''|
|-''Basics''|
|''Images''|
|''Command Decorations''|
|''Math''|
|''Beginner's Cookbook''|
|''Command Guide''|
|''Bouncing Balls Tutorial''|
|''Cheatsheet''|
|''Contribute''|

Updated: 19-March-2023 20:30 UTC Commit:
