#@gmic
#
#  File        : prawnsushi.gmic
#                ( G'MIC commands file )
#
#  Description : Personal G'MIC filters done by 'prawnsushi'.
#
#  Copyright   : Prawnsushi
#                ( http://prawnsushi.free.fr )
#
#  License     : CeCILL v2.0
#                ( http://cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#@gui _<b>Degradations</b>
#-------------------------

#@gui Sloppy Mess : pr_sloppymess, pr_sloppymess_preview(0)
#@gui : note = note("<span color="#EE5500"><small><b>Slices:</b></small></span>")
#@gui : Angle = int(0,0,360)
#@gui : Width (px) = int(1,1,5000)
#@gui : Axis = choice("X-Axis","Y-Axis")
#@gui : Mirror Axis = choice("X-Axis","Y-Axis")
#@gui : Mirror Selection Interval (0:Off, -1:Random) = int(-1,-1,50)
#@gui : Invert Mirror Selection = bool(0,0,1)
#@gui : sep = separator()
#@gui : note = note("<span color="#EE5500"><small><b>Rotation:</b></small></span>")
#@gui : Range Clockwise = int(35,0,90)
#@gui : Range Counter-Clockwise = int(-35,-90,0)
#@gui : Boundary Conditions = int(2,0,3)
#@gui : Center X(%) = int(0,0,100)
#@gui : Center Y(%) = int(0,0,100)
#@gui : sep = separator()
#@gui : Deform = int(3,0,20)
#@gui : sep = separator()
#@gui : Iterations = int(1,1,20)
#@gui : Blending =  choice(3,"Add","Alpha","And","Average","Blue","Burn","Darken","Difference","Divide","Dodge",\
# "Edges","Exclusion","Freeze","Grainextract","Grainmerge","Green","Hardlight","Hardmix","Hue","Interpolation",\
# "Lchlightness","Lighten","Lightness","Linearburn","Linearlight","Luminance","Multiply","Negation","Or","Overlay",\
# "Pinlight","Red","Reflect","Saturation","Screen","Seamless","Seamless_mixed","Shapeareamax","Shapeareamax0",\
# "Shapeareamin","Shapeareamin0","Shapeaverage","Shapeaverage0","Shapemedian","Shapemedian0","Shapemin","Shapemin0",\
# "Shapemax","Shapemax0","Shapeprevalent","Softburn","Softdodge","Softlight","Stamp","Subtract","Value","Vividlight",\
# "Xor")
#@gui : Strength = float(100,0,100)
#@gui : sep = separator()
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.      \
# Latest Update: <i>2023/08/17</i>.</small>")

pr_sloppymess : skip "${1=0},${2=1},${3=0},${4=0},${5=-1},${6=0},${7=35},${8=-35},${9=2},${10=0},${11=0},${12=3},${13=1},${14=3},${15=100}"

ang,wid,ax,__mir,inter,inv,rang_f,rang_b,bound,cx,cy,def,it,bl,str=$*
arg0 $bl,\
       "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","edges","exclusion","freeze",\
       "grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lchlightness","lighten",\
       "lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red",\
       "reflect","saturation","screen","seamless","seamless_mixed","shapeareamax","shapeareamax0","shapeareamin",\
       "shapeareamin0","shapeaverage","shapeaverage0","shapemedian","shapemedian0","shapemin","shapemin0","shapemax",\
       "shapemax0","shapeprevalent","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor"
  blending_mode=${}

  foreach {
    n 0,255
    wi,he:=w,h
    if $ang>0&&$ang!=360 rotate $ang,0,3 fi
    if $ax==0 spins,dir,sli={w/$wid},x,y else spins,dir,sli={h/$wid},y,x fi
    if $__mir==0 __mir=x else __mir=y fi
    repeat $it
      +s. $dir,$spins
      if $rang_f||$rang_b
        repeat $spins { rotate[{$>+1}] {u($rang_f,$rang_b)},0,$bound,$cx%,$cy% }
      fi
      l[^0] {
      sel=0--1
      if $inv==1 sel..=^ fi  # Negate selection
      if $inter>1
        ap[$sel:$inter] "mirror $__mir"
      elif $inter==-1
        repeat 2 {
          step:=floor(u(1,20))
          ap[$sel:$step] "mirror $__mir"
        }
      fi
      }
      a[^0] $dir
      +gradient_norm.
      negate.
      deform[^0] $def
      blend[^0] edges,0.6
      blend $blending_mode,$str%
    done

    if $ang>0&&$ang!=360
      rotate. -$ang,0,3
      vx,vy:=floor((w-$wi)/2),floor((h-$he)/2)
      vxb,vyb:=$vx+$wi-1,$vy+$he-1
      crop. $vx,$vy,$vxb,$vyb
    fi
    equalize
    n 0,255
  }
pr_sloppymess_preview :
  pr_sloppymess $*


#@gui _<b>Testing</b>
#@gui <i>Prawnsushi</i>
#-------------------------

#@gui Uglify : uglify, uglify_preview(0)
#@gui : Write settings on picture = bool(0,0,1)
#@gui : note = note{"<small>Use original input image resolution or choose processing resolution (i.e. Half res + Upscale 2x). Beware: Preview lies.</small>"}
#@gui : Original Resolution = bool(1,0,1)
#@gui : Processing Resolution = int(1000,500,5000)
#@gui : Upscale 2x (Iterations) = _int(0,0,5)
#@gui : sep = separator()
#@gui : - Presets = choice(0,"Default","1 - From Scratch","2 - Soft","3 - Cracked","4 - Black","5 - Faded Black","6 - Nuudlz for a blank page")
#@gui : sep = separator()
#@gui : Pre-Process = bool(0,0,1)
#@gui : - Sharpening = int(0,0,500)
#@gui : - Blur = float(0,0,10)
#@gui : - Local normalization = float(0,0,3)
#@gui : sep = separator()
#@gui : Sloppiness = bool(1,0,1)
#@gui : - Distort = float(3,0,20)
#@gui : - Blur = float(3,0,50)
#@gui : - Blend Mode = choice(13,"add","and","average","blue","burn","darken","difference","divide","dodge","exclusion","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : - Strength = float(0.5,0.0,1.0)
#@gui : sep = separator()
#@gui : Watering = bool(1,0,1)
#@gui : - Smoothing = int(12,0,40)
#@gui : - Iterations = int(1,0,10)
#@gui : Fuzzy Frame Size (%) = float(5,0,45)
#@gui : - Frame Blur = int(20,0,150)
#@gui : - Frame Strentgh = float(0.5,0,1)
#@gui : Plasma Seed ( -1 : Random ) = int{-1,-1,999999}
#@gui : - Plasma Saturation = int(-100,-100,100)
#@gui : - Plasma Blur = float(0,0,50)
#@gui : - Blend Mode = choice(7,"add","and","average","blue","burn","darken","difference","divide","dodge","exclusion","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation",screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : - Plasma Strength = float(0.6,0,1)
#@gui : sep = separator()
#@gui : Cracks = bool(1,0,1)
#@gui : Sharpening = int(150,0,500)
#@gui : - Shock Filter = int(1,0,1)
#@gui : Light Relief (0 means all off) = float(0.05,0,1)
#@gui : - Light2 = float(0.02,0,1)
#@gui : - Light3 = float(0.02,0,1)
#@gui : sep = separator()
#@gui : Sketch = bool(1,0,1)
#@gui : - Likeness = int(25,0,30)
#@gui : - Contrast = int(0,-100,100)
#@gui : - Gamma = int(0,-100,100)
#@gui : - Thickness = int(2,0,40)
#@gui : - Sketch strength = float(1,0,1)
#@gui : --- Messy lines = float(0.8,0,1)
#@gui : - White lines = float (0.6,0,1)
#@gui : --- W. L. Deform = float (1.6,0,40)
#@gui : - Blend Mode = choice(22,"add","and","average","blue","burn","darken","difference","divide","dodge","exclusion","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation",screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : note = note("<small>Setting Sktech Strength to 0 disables Messy lines too.\n Messy lines uses 'Breaks' by David Tschumperlé.</small>")
#@gui : sep = separator()
#@gui : Noise = float(3,0,6)
#@gui : Canvas = float(0.3,0,1)
#@gui : Canvas density = int(0,0,30)
#@gui : Color = color(255,255,255,255)
#@gui : sep = separator()
#@gui : Post-Process = bool(1,0,1)
#@gui : Emboss = float(1.5,0,5)
#@gui : Mix Original Hue/Sat = float(0.5,0,1)
#@gui : Brightness = float(0,-100,100)
#@gui : Contrast = float(0,-100,100)
#@gui : Gamma = float(0,-100,100)
#@gui : Hue = float(0,-100,100)
#@gui : Saturation = float(0,-100,100)
#@gui : sep = separator()
#@gui : - Old Presets = _choice(0,"Default","1 - From Scratch","2 -Soft","3 - Cracked","4 - Black","5 - Faded Black","6 - Nuudlz for blank page")_0
#@gui : sep = separator()
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.      \
# Latest Update: <i>2023/08/17</i>.</small>")

uglify :

com,origres,procres,dccires,preset,bst,bstsharp,bstblur,locnorm,\
filt,dist,distblur,distmerge,diststr,wc,bilsize,bilrep,fuzz,fuzzblur,\
fuzstr,plsmseed,plsmsat,plsmblur,plasmerge,plastr,cracks,sckrad,sck,lgtone,\
lgttwo,lgthree,sketch,sklike,cutmin,cutmax,linthick,linestr,brkstr,wl,wldef,skmerge,\
noistr,cnvs,cvmod,cvr,cvg,cvb,cva,post,emboss,huestr,\
bri,con,gam,hue,sat=${1-56}

arg0 $distmerge,\
    "add","and","average","blue","burn","darken","difference","divide","dodge","exclusion","grainextract","grainmerge",\
    "green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply",\
    "negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight",\
    "stamp","subtract","value","vividlight","xor"
distmerge=${}

arg0 $plasmerge,\
    "add","and","average","blue","burn","darken","difference","divide","dodge","exclusion","grainextract","grainmerge",\
    "green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply",\
    "negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight",\
    "stamp","subtract","value","vividlight","xor"
plasmerge=${}

arg0 $skmerge,\
    "add","and","average","blue","burn","darken","difference","divide","dodge","exclusion","grainextract","grainmerge",\
    "green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply",\
    "negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight",\
    "stamp","subtract","value","vividlight","xor"
skmerge=${}

foreach {
  to_rgba
  nm[0] ORIG
  __ORIGW={0,w}
  __ORIGH={0,h}
  if !$origres res=$procres,$procres rr2d[ORIG] $res,0,6 fi
  n 0,255

  if $bst
    if $bstblur b $bstblur fi
    if $bstsharp sharpen $bstsharp fi
    if $locnorm normalize_local $locnorm,$locnorm fi
  fi

  [ORIG] nm. REND

  if $filt
    if $diststr
      [ORIG] nm. FILT
      l[REND,FILT] {
        usrmod=$dist,$distblur
        if [$usrmod]!=[0,0]
          if $dist apc. "deform $dist" fi
          if $distblur b. $distblur fi
          blend[REND,FILT] $distmerge,$diststr
          n[REND] 0,255
        fi
      }
    fi
  fi

  if $wc
    if $plastr
      [ORIG] nm. PLAS
      l[PLAS] {
        if $plsmseed>-1 srand $plsmseed fi
        plasma 1,2,5
        if $plsmsat!=0 adjust_colors 0,0,0,0,$plsmsat fi
        if $plsmblur>0 b $plsmblur fi
      }
      blend[REND,PLAS] $plasmerge,$plastr
    fi

    if $fuzz
      [ORIG] nm. FUZZ
      l[FUZZ] {
        fc 255,255,255
        rectangle $fuzz%,$fuzz%,{100-$fuzz}%,{100-$fuzz}%,1,0
        if $fuzzblur b $fuzzblur,0 fi
        repeat 10 {
          deform $fuzz
          spread {[$fuzz/2,$fuzz/2]}
        }
        if $fuzstr!=1 mul $fuzstr fi
      }
      blend_median[REND,FUZZ]  fi
  fi

  local[REND]
    if $cracks
      if $sckrad  deform 1.5 sharpen $sckrad,$sck dilate_oct 1.5 sharpen $sckrad,$sck fi
      if $lgtone
        repeat 3 {
          fx_light_relief $lgtone,$lgttwo,$lgthree,0,0.2,50,50,20,0.084,0,0
          b 2 erode_oct 3 sharpen $sckrad
        }
      fi
    fi

    if $wc
      if $bilrep>0
        repeat $bilrep {
          deform {0,w/1000} bilateral $bilsize,$bilsize,$bilsize,$bilsize
        }
      fi
    fi
  done

  if $post
    if $huestr
      [ORIG] nm. HUE
      [ORIG] nm. SAT
      b[HUE,SAT] 5
      blend[HUE,REND] hue,$huestr
      blend[SAT,REND] saturation,$huestr
    fi
  fi

  if $sketch
    if $linestr>0
      [ORIG] nm. LINE
      l[LINE] {
        if $__ORIGW/2>1500 r 50%,50%,100%,100%,6 fi
        deform {0,w/2000} rolling_guidance {31-$sklike},20,0
        if $__ORIGW/2>1500 r 200%,200%,100%,100%,6 fi
        gradient_norm negate
        if $brkstr>0
          . repeat 2 fx_breaks. 1,5,20,0,3  done
          blend[-1,-2,LINE] multiply,$brkstr
        fi
        if $linthick
          erode_circ. {$linthick/2}
          spread. {$linthick/10}
          dilate_circ. {$linthick/10}
          b. {$linthick/5}
          if $linthick/5>=3 sharpen. {$linthck*100} else sharpen. 100 fi
        fi
      adjust_colors. ,$cutmin,$cutmax,, n. 0,255 spread. 0.5
      +store. line
      }
      split[REND] c a[1,2,3] c
      blend[LINE,REND] $skmerge,$linestr
    if $wl>0
      $line negate. erode_circ. {$linthick/2}
      if $wldef deform. $wldef fi
      . blend[REND,LINE] or,$wl blend[-1,-2] add,1
    fi
    a[REND] [-1],c
    fi
  fi

  n[REND] 0,255
  keep[REND]

  if $post
    usrmod=$bri,$con,$gam,$hue,$sat
    if [$usrmod]!=[0,0,0,0,0] adjust_colors[REND] $bri,$con,$gam,$hue,$sat fi
  fi

  if $dccires repeat $dccires { r 200%,200%,100%,100%,6 } fi
  if $noistr fx_noise $noistr,0,11,1,0,50,50 fi
  if $cnvs pr_canvas[REND] $cnvs,$cvmod,1,$cvr,$cvg,$cvb,$cva fi

  if $post
    if $emboss rep_emboss_relief 5,0,0.5,$emboss,1,0,1 fi
  fi

  if $com
    expand_y 35,0
    shift 0,35
    text "${1--1}",10,30,12,1,255
    text $distmerge" "$plasmerge" "$skmerge,10,50,20,1,255
  fi
}

uglify_preview :

  __output=${1--2}
  preset,old_preset={[$5,${-1}]}

  if $preset==1
    variables=0,1,1000,0,1,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,-1,-100,0,23,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,22,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0
  elif $preset==2
    variables=0,1,1000,0,2,1,0,2,0,1,20,10,7,0.4,1,12,2,127,42,0.365,-1,0,0,11,0.5,1,1,0,0.01,0.02,0.02,1,30,0,0,5,1,0,1,4,22,6,0,0,255,255,255,255,1,0,0.8,0,0,9,0,0
  elif $preset==3
    variables=0,1,1000,0,3,0,0,0,0.3,1,3,3,13,0.5,1,12,1,0,20,0.5,-1,-100,0,37,0.755,1,500,1,0.027,0.02,0.02,1,25,0,0,2,1,0.9,1,4,22,6,0.3,0,255,255,255,255,1,1.5,1,0,0,31,0,0
  elif $preset==4
    variables=0,1,1000,0,0,1,500,0,0.366,0,3,3,13,0.5,1,10,0,0,0,0.5,-1,80,0,7,0.2,1,0,1,0.134,0.02,0.02,1,29,0,0,0,0.707,0,1,1.6,19,6,0.61,11,255,255,255,255,1,1.1,0,0,0,0,0,-100
  elif $preset==5
    variables=0,1,1000,0,0,1,308,0,2.3736,1,3,3,0,0.5,1,23,2,350,1,0.5,-1,100,0,10,1,1,0,1,0.2,0.02,0.02,1,29,0,0,2,0.9,1,1,1.6,22,6,1,19,134,110,71,255,1,1,0,0,0,13.4,0,-100
  elif $preset==6
    variables=0,1,1000,0,0,0,0,0,0.3,0,3,3,13,0.5,1,12,0,0,20,0.5,437767,-100,19.75,37,1,1,500,0,0.021,0.02,0.02,1,20,0,0,4,1,1,1,4,13,0,0,16,125,125,125,255,1,0.965,1,0,-47.6,0,0,0
  fi

  if $preset
    if $preset==$old_preset
      if [$__output]!=[$variables]
        __output=${1-4},0,${6--2}
      fi
  else
    __output=$variables
    fi
  fi

  com,origres,procres,dccires,preset,bst,bstsharp,bstblur,locnorm,\
  filt,dist,distblur,distmerge,diststr,wc,bilsize,bilrep,fuzz,fuzzblur,\
  fuzstr,plsmseed,plsmsat,plsmblur,plasmerge,plastr,cracks,sckrad,sck,lgtone,\
  lgttwo,lgthree,sketch,sklike,cutmin,cutmax,linthick,linestr,brkstr,wl,wldef,skmerge,\
  noistr,cnvs,cvmod,cvr,cvg,cvb,cva,post,emboss,huestr,\
  bri,con,gam,hue,sat=$__output

  uglify $__output

  u "{"$com"}""{"$origres"}""{"$procres"}""{"$dccires"}""{"$preset"}""{"$bst"}""{"$bstsharp"}""{"$bstblur"}""{"$locnorm"}"\
  "{"$filt"}""{"$dist"}""{"$distblur"}""{"$distmerge"}""{"$diststr"}""{"$wc"}""{"$bilsize"}""{"$bilrep"}""{"$fuzz"}""{"$fuzzblur"}"\
  "{"$fuzstr"}""{"$plsmseed"}""{"$plsmsat"}""{"$plsmblur"}""{"$plasmerge"}""{"$plastr"}""{"$cracks"}""{"$sckrad"}""{"$sck"}""{"$lgtone"}"\
  "{"$lgttwo"}""{"$lgthree"}""{"$sketch"}""{"$sklike"}""{"$cutmin"}""{"$cutmax"}""{"$linthick"}""{"$linestr"}""{"$brkstr"}""{"$wl"}""{"$wldef"}""{"$skmerge"}"\
  "{"$noistr"}""{"$cnvs"}""{"$cvmod"}""{"$cvr,$cvg,$cvb,$cva"}""{"$post"}""{"$emboss"}""{"$huestr"}"\
  "{"$bri"}""{"$con"}""{"$gam"}""{"$hue"}""{"$sat"}""{"$preset"}"


#@gui Slice Stretch-Squeeze :pr_streeze, pr_streeze_preview(1)+
#@gui : Iterations = int(10,1,100)
#@gui : note = note("<small>Do not set this higher than the smallest side of the image:</small>")
#@gui : Slices = int(101,5,1001)
#@gui : note = note("<small>If there is a seam in the image try adding or removing Slices. Odd numbers seem to work better. </small>")
#@gui : sep = separator()
#@gui : note = note("<span color="#EE5500"><small><b>Resizing:</b></small></span>")
#@gui : Outer Range A (Starting @0%) = int(20,0,100)
#@gui : Outer Range B (Ending @100%) = int(80,0,100)
#@gui : O.R. Factor (%) = int(80,1,200)
#@gui : Inner Selection A (Starting %) = int(20,0,100)
#@gui : Inner Selection B (Ending %) = int(80,0,100)
#@gui : I.S. Factor (%) = int(120,1,200)
#@gui : Axis = choice(0,"X","Y","XY")
#@gui : Interpolation = choice(2,"Nearest","Average","Linear","Grid","Bicubic","Lanczos" )
#@gui : Show Steps = bool(0,0,1)
#@gui : Delay (ms) = int(1,1,1000)
#@gui : sep = separator()
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.\
# Latest Update: <i>2023/08/17</i>.</small>")

pr_streeze: skip "${1=10},${2=20},${3=20},${4=80},${5=80},${6=20},${7=80},${8=120},${9=0},${10=2},${11=0},${12=1}"
  foreach {
    vx,vy:=w,h
    if $9==0||$9==2 axis,rx,ry,rxb,ryb=x,$5,100,$8,100 fi
    if $9==1 axis,rx,ry,rxb,ryb=y,100,$5,100,$8 fi
    repeat 2 {
      repeat $1 {
        s $axis,$2
          l[0%-$3%,$4%-100%] { r $rx%,$ry%,100%,100%,{$10+1},1 }
          l[$6%-$7%] { r $rxb%,$ryb%,100%,100%,{$10+1},1 }
        a $axis r $vx,$vy,100%,100%,{$10+1},1
        if $11 w wait $12 fi
      }
      if $9==2 axis,rx,ry,rxb,ryb=y,100,$5,100,$8 else break fi  # Loops once if XY is selected
    }
  }

pr_streeze_preview:
  pr_streeze $*


#@gui Line Spam : pr_linespam, pr_linespam_preview(1)*
#@gui : Iterations = int(30,1,100)
#@gui : Line Base Thickness = float(3,0.01,50)
#@gui : Thickness Scaling = float(1.02,0.01,1.2)
#@gui : Line Opacity = float(0.8,0,1)
#@gui : Start X = float(-1,-100,100)
#@gui : Start Y = float(10,-100,100)
#@gui : End X = float(101,0,200)
#@gui : End Y = float(100,0,200)
#@gui : Deform = float(0,0,20)
#@gui : Style = choice(0,"A","B","C","D")
#@gui : Base Color = color(255,85,0,255)
#@gui : Color Variation = float(0,-15,15)
#@gui : Randomize Colors = bool(0,0,1)
#@gui : sep = separator()
#@gui : Antialiasing = bool(0,0,1)
#@gui : Amplitude = int(5,0,100)
#@gui : Edge Threshold (%) = int(10,0,100)
#@gui : Smoothness = float(0.8,0,5)
#@gui : sep = separator()
#@gui : Spam! = int(1,1,10)
#@gui : Transparent Background = bool(0,0,1)
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.\
# Latest Update: <i>2023/08/17</i>.</small>")

pr_linespam: skip "${1=30},${2=3},${3=1.02},${4=0.8},${5=-1},${6=10},${7=101},${8=100},${9=0},${10=0},${11=255,85,0,255},${12=0},${13=0},${14=0},${15=5},${16=10},${17=0.8},${18=1},${19=0}"
  foreach {
    if ${-1} to_rgba fc 0,0,0,0 else [0] to_rgba. fc. 0,0,0,0 fi
      l. {
        bthick=$2
        repeat 4 {
          repeat $-2 {
            iter,thick,tscale,opac,sx,sy,ex,ey,def,style,colr,colg,colb,cola,cvar,rcol,aa,amp,edg,smoo,spam=${1--2}
            c={$>+1}
            repeat $iter {
              if $rcol==1
                col:={[u($colr-50,$colr+50),u($colg-50,$colg+50),u($colb-50,$colb+50)]},255
              else
                col=$colr,$colg,$colb,255
              fi
              if $style==0 A,B=$>,$< elif $style==1 A,B:=[$<,$>]*[2,.5] elif $style==2 A,B=$< else A,B:=$>/2 fi
              thickline. {$sx*$c+$bthick}%,{$A*$sy}%,{$B+$ex}%,{$ey-$A*$B}%,$thick,$opac,$col
              thick*=$tscale
              if inrange($colr+$cvar,0,255,0,0) colr+=$cvar fi
              if inrange($colg+$cvar,0,255,0,0) colg+=$cvar fi
              if inrange($colb+$cvar,0,255,0,0) colb+=$cvar fi
            }
          }
          if $def deform $def fi
          rotate. 90,0,0
        }
        if $aa fx_smooth_antialias $amp,$edg,$smoo fi
        n 0,255
      }
      if $!>1 blend alpha,1 fi
  }
pr_linespam_preview:
  pr_linespam $*


#@gui Channel Shuffle : pr_chanshuff, pr_chanshuff_preview(1)*
#@gui : Slices (0:Random) = int(0,0,1000)
#@gui : Angle = int(0,0,360)
#@gui : Axis = choice(0,"X","Y")
#@gui : Sorting = choice(1,"Reverse","Shuffle","Minimum Value X","Minimum Value Y",\
#"Minimum Value Z","Minimum Value C","Maximum Value X","Maximum Value Y",\
#"Maximum Value Z","Maximum Value C","Red","Green","Blue","Alpha",\
#"Minimum Deviation","Maximum Deviation","Average Deviation","Variance Deviation",\
#"Standard Deviation","Sum Value","Product Value","Median Value",\
#"L2-Norm","Width","Height","Depth")
#@gui : Ordering = choice(0,"Positive","Negative")
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</a>, <a href="https://tschumperle.users.greyc.fr/">David Tschumperlé</a></i>.\
# Latest Update: <i>2023/08/17</i>.</small>")
#@gui : note = note("Forum thread: <i><a href="https://discuss.pixls.us/t/channel-shuffle/38414">Pixls.us: Channel Shuffle</a></i>.")

pr_chanshuff: skip "${1=100},${2=0},${3=0},${4=1},${5=0},${6=10},${7=101},${8=100},${9=0},${10=0}"
  foreach {
    fac=$1
    arg0 $3,"x","y" axis=${}
    arg0 $4,\
        "rv","u","xm","ym","zm","cm","xM","yM","zM","cM","R","G","B","A",\
        "im","iM","ia","iv","id","is","ip","ic","in","w","h","z"
    sort=${}
    arg0 $5,"+","-" order=${}
    wi,he:=w,h

    if $3
      if $1>$he fac=$he fi sli={0,floor(h/$fac)}
    else
      if $1>$wi fac=$wi fi sli={0,floor(w/$fac)}
    fi
    if $2>0&&$2!=360 rotate $2,0,0 fi
    +s c
    cc:=$!-1
    if $1
      s[^0] $axis,$sli
    if $4>0 sort_list[^0] $order,$sort else rv[^0] fi
      repeat $cc { a[{$>+1}-{$sli+$>}] $axis }
    else
      N:=floor(u(2,50))
      repeat $cc { l[{$>+1}] {
      pr_rnd_split $N,$3
        if $4>0 sort_list[^0] $order,$sort else rv[^0] fi
        a $axis
        }
      }
    fi
    a[^0] c keep.
    if $2>0&&$2!=360
      rotate. -$2,0,0
      vx,vy:=floor([w-$wi,h-$he]*0.5)
      vxb,vyb:=$vx+$wi-1,$vy+$he-1
      crop. $vx,$vy,$vxb,$vyb
    fi
  }

  pr_chanshuff_preview:
  pr_chanshuff $*


pr_rnd_split: skip "${1=10},${2=0}"
  # By David Tschumperlé
  foreach {
    N=$1
    l. {
     if $2 D=h  else D=w fi
      {$N+1},1,1,1,>u+j(-1) n. 0,{-2,$D} round. discard.
      repeat h-1 {
        param=1,[i[$>],i[$>+1]-1]
        if $2 +rows[0] {$param} else +columns[0] {$param} fi
      }
      rm[0,1]
    }
  }

#@gui Prawn Canvas : pr_canvas, pr_canvas_preview(0)
#@gui : Strength = float(0.3,0,1)
#@gui : Details = float(0,0,30)
#@gui : Colored = bool(0,0,1)
#@gui : Color = color(255,255,255,255)
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.\
# Latest Update: <i>2023/08/17</i>.</small>")
pr_canvas : skip "${1=1},${2=0.5},${3=0},${4=255},${5=255},${6=255},${7=255}"
  foreach {
    nm REND
    to_a
    +fc 255,255,255 noise. 50,2 to_gray. . .
    if $2
      __wat,__watb=water.,water..
      __watv=$2,1,45
    else
      __wat,__watb,__watv=b.,b..,0
    fi
     blur_x. 30  $__wat $__watv  sharpen. 50  spread. 1.7
     blur_y.. 30  $__watb $__watv sharpen.. 50 spread.. 1.7
    *. .. keep[0,-1] +n. 0,255 +gradient. xy,1 -a[-2,-1] c *. {$1/100}
    if $3
      warp[REND] .,3,1,3,1
      +fc[REND] $4,$5,$6,$7
      move[-1] 0 blend[0,REND] alpha
      nm[0] REND
    else
      sh[REND] 0,2 warp. ..,3,1,3,1 rm.
    fi
    keep[REND]
  }

pr_canvas_preview:
  pr_canvas $*


#@gui Paper Cuts : pr_papercuts, pr_papercuts_preview(0)
#@gui : Simplification = float(3,0,32)
#@gui : Local Normalization = float(0,0,6)
#@gui : Colors* ( RAM hungry! ) = int(8,2,40)
#@gui : Color mode = choice(1,"Original","Monochrome","Random")
#@gui : Monochrome Color = color(80,127,255)
#@gui : Color Variation (Off if Random) = int(0,0,10)
#@gui : Sorting = choice(14,"None","Reverse","Shuffle","Minimum Value X","Minimum Value Y",\
#"Minimum Value Z","Minimum Value C","Maximum Value X","Maximum Value Y",\
#"Maximum Value Z","Maximum Value C","Red","Green","Blue","Alpha",\
#"Minimum Deviation","Maximum Deviation","Average Deviation","Variance Deviation",\
#"Standard Deviation","Sum Value","Product Value","Median Value",\
#"L2-Norm","Width","Height","Depth")
#@gui : Ordering = choice(1,"Forward","Backward")
#@gui : sep = separator()
#@gui : note = note("<span color="#EE5500"><small><b>Shadows:</b></small></span>")
#@gui : Softness = float(4,0,6)
#@gui : Opacity = float(0.6,0,1)
#@gui : Shifting = float(4,0,10)
#@gui : Light angle (degrees) = choice(0,"0","45","90","135","180","225","270","315","360")
#@gui : sep = separator()
#@gui : Multiple Layers = bool(1,0,1)
#@gui : note = note("<small><b>First layer will contain all other layers, merged</b></small>")
#@gui : sep = separator()
#@gui : note = note("<span color="#EE5500"><small><b>Imperfections:</b></small></span>")
#@gui : Color Dithering = bool(0,0,1)
#@gui : Deformation = float(0,0,40)
#@gui : Seed = int(0,0,100000)
#@gui : Canvas Effect = bool(1,0,1)
#@gui : Canvas Strength = float(0.6,0,1)
#@gui : Downscaling % (Uses less RAM)= float(100,1,100)
#@gui : sep = separator()
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.\
## Latest Update: <i>2023/04/09</i>.</small>")
#@gui : sep = separator()
#@gui : note = note("<small>*Depends on the number of colors in the indexed version of the input image.\
#\n If "Output to Multiple Layers" is checked, 1 color = 1 layer. \n Try not use a lot of colors if you have less than 16 GB of RAM, or use downsampling.\
#\n Preview itself is already downscaled by 50% unless you choose a value lower than 100.</small>")
pr_papercuts :
  foreach {
    simp,ln,lay,col,cr,cg,cb,cvar,sort,order,shb,sho,sx,ang,mulay,ind,def,seed,cvs,cstr,down=$*
    arg0 $9,\
      "none","rv","u","xm","ym","zm","cm","xM","yM","zM","cM","R","G","B","A",\
      "im","iM","ia","iv","id","is","ip","ic","in","w","h","z"
    sort=${}
    arg0 $10,"+","-" order=${}
    arg0 $14,"0","45","90","135","180","225","270","315","360" ang=${}
    to_rgb
    wi,he:=w,h
    if $down<100 r $down%,$down%,100%,100%,3 coeff:=$down/100 simp,ln,shb,def*=$coeff else coeff=1 fi
    to_rgb n 0,255
    if $ln normalize_local $ln,$ln fi
    if $simp
      b {$simp/5}
      bilateral {[$simp*2,$simp*2]},0,0
    fi
    autoindex $lay,$ind,0 #b 0.7
    split_colors 20,$lay,32 np=$!
    if $def pr_deform $def,$seed,2 fi
    sh 3 b[$np--1] {0.8*$coeff} rm[$np--1]
      sh 0,2
        if $col==0&&$cvar ap[$np--1] "adjust_colors ,,,{[u(-$8,$8),u(-$8)]},0,255" fi
        if $col==1 ap[$np--1] "fc $5,$6,$7,255 adjust_colors ,,,{[u(-$8,$8),u(-$8)]},0,255" fi
        if $col==2 ap[$np--1] "fc ${-rgb},255" fi
        dilate_circ 1.5
      rm[$np--1]
    if $9>1 sort_list $order,$sort fi
    if $9==1 rv fi
    if $col==1 foreach { mul {0.97^$<} } fi
    $wi,$he,1,3,[255,255,255]
    if $cvs
      foreach {
        if $cstr pr_canvas $cstr,{u(20,30)},0 fi
        +rep_emboss_relief 5,$ang,1,2,1,0,1 blend alpha
        +b $shb spread. {$shb/4}
        sh. 0,2 fc. 0,0,0 rm.
        if $sho<1  mul. $sho  fi
        if $sx
          sx*=$coeff
          if $ang==0 coords=-$sx,0
          elif $ang==45 coords=-$sx,$sx
          elif $ang==90 coords=0,$sx
          elif $ang==135 coords=$sx,$sx
          elif $ang==180 coords=$sx,0
          elif $ang==225 coords=$sx,-$sx
          elif $ang==270 coords=0,-$sx
          elif $ang==315 coords=-$sx,-$sx
          elif $ang==360 coords=-$sx,0
          fi
         shift. $coords
        fi
        shrink_xy {$>*$coeff}
        mv. 0 blend alpha
      if $down<100 r $wi,$he,100%,100%,1 fi
      normalize_local 0.3,0.3,0,0,1
      }
    fi

    to_rgb. negate.
    mv. 0 if $mulay +blend alpha rv n 0,255 else blend alpha n 0,255 fi
  }

pr_papercuts_preview:
  tic
  if $-1<100&&$-1!=50 pr_papercuts $* else pr_papercuts ${1--2},50 fi
  toc to ${}

#@cli pr_thickspline : x0[%],y0[%],u0[%],v0[%],x1[%],y1[%],u1[%],v1[%],_lines_count,_spacing,_opacity,_color1,...
#@cli : Draw a number of specified colored spline curves on selected images (cubic hermite spline).
#@cli : Default values: 'lines_count=3' 'spacing=2', 'opacity=1' and 'color1=0'.
#@cli : $ 400,400,1,3  repeat 30 { pr_thickspline {u([w,h,1000,1000,w,h,1000,1000,10,10])},0.5,${-rgb} }
 e[^-1] "Draw a number $9 of splines ($1,$2) - ($5,$6) on image$?, with spacing $10, opacity $11 and color (${12--1})."
pr_thickspline : skip ${9=3},${10=2},${11=1},${12=0}
  if $10<=1 spline ${1-8},${11--1}
  else foreach {
    x0={if(${"is_percent $1"},$1*(w-1),$1)}
    y0={if(${"is_percent $2"},$2*(h-1),$2)}
    u0={if(${"is_percent $3"},$3*(w-1),$3)}
    v0={if(${"is_percent $4"},$4*(h-1),$4)}
    x1={if(${"is_percent $5"},$5*(w-1),$5)}
    y1={if(${"is_percent $6"},$6*(h-1),$6)}
    u1={if(${"is_percent $7"},$7*(w-1),$7)}
    v1={if(${"is_percent $8"},$8*(h-1),$8)}
    th=$10
      eval
      it=0;${-math_lib}"repeat ( $9,spline(#0,["$x0-it","$y0-it"],["$u0-it*1","$v0+it*1"],["$x1-it","$y1-it"],["$u1-it*1","$v1+it*1"],$11,[${12--1}]);it+=$th )"
  } fi


#@gui Sick Painter : pr_sickpaint, pr_sickpaint_preview(0)
#@gui : Obstinacy = int(30,5,100)
#@gui : Start X (px range) = int(0,-1000,1000)
#@gui : Start Y (px range) = int(0,-1000,1000)
#@gui : Step X (px range) = int(100,50,1000)
#@gui : Step Y (px range) = int(100,50,1000)
#@gui : Line Base Thickness (px range) = int(100,10,500)
#@gui : Max opacity = float(0.7,0.01,1)
#@gui : Min Opacity = float(0.4,0.01,1)
#@gui : Anger & Rage = int(1000,1,2000)
#@gui : Color 1 = color(255,0,0)
#@gui : Color 2 = color(32,153,162)
#@gui : Panels= int(12,3,50)
#@gui : sep = separator()
#@gui : note = note("<small>Author: <i><a href="http://prawnsushi.free.fr">Prawnsushi</i></a>.\
# Latest Update: <i>2023/08/17</i>.</small>")
pr_sickpaint:
  foreach {
    div:=h/$4
    Rstep,Gstep,Bstep:=sqrt(([${13-15}]-[${10-12}])^2)/($div*1.5)
      repeat $1 {
      sx,sy,ex,ey:=u($2),u($3),u($2),u($3)
      Rs,Gs,Bs=$10,$11,$12
      if $8<1 o:=u($8,$7) else o=1 fi
      do
        ls,d:=u($6)/($>+1)*2,u($9)
        ex,ey+=u($4),u($5)
        thickline {[u($sx)*3,u($sy)*3,$ex+u($>*2),$ey+u($>*2),u($ls)]},$o,$Rs,$Gs,$Bs
        thickline $sx,$sy,$ex,$ey,$ls,$o,0,0,0
        circle $sx,$sy,{$ls*0.3},$o,$Rs,$Gs,$Bs
        cx,cy:=u($>*100),u($>*100)
        circle {[$sx+$cx,$sy+$cy,$ls*0.3]},$o,$Rs,$Gs,$Bs
        circle {[$sx+u($>)*2,$sy+u($>)*2,u(5),u(0.5)]},0,0,0
        pr_thickspline {[$sx+$>,$sy+$>,u(-$d,$d),0,$ex+$>,$ey+$>,u(-$d,$d),0,u(10,30),u(2,50),$o,$Rs,$Gs,$Bs]}
        pr_thickspline {[$sx-$>,$sy-$>,u(-$d,$d),u(-$d,$d),$ex-$>,$ey-$>,u(-$d,$d),u(-$d,$d),u(10,30),u(2,50),$o,0,0,0]}
        if $10>$13 Rs-=$Rstep else Rs+=$Rstep fi
        if $11>$14 Gs-=$Gstep else Gs+=$Gstep fi
        if $12>$15 Bs-=$Bstep else Bs+=$Bstep fi
        sx,sy=$ex,$ey
      while $ey<=h||$ex<=w

      if $ey>=h||$ex>=w
        repeat 1 {
        rotate {[g,0,0,u(150)%,u(150)%]}
        s x,$16 foreach { nm {$>/100} } sort_list -,u
        mirror[{round(u($!-1))},0,-1] x
        mirror[{round(u($!-1))},0,-1] y
        shift[1] {[[u(-10,10),u(-10,10)],0,0,floor(u(3.9))]},0
        spread[1] {u(0.8)} deform[1] {u(2.8)},0
        sort_list -,n
        a x
        }
      fi
    }
    sharpen 1800
    smooth 40,0,1,1,2
    rep_emboss_relief 5,0,0.5,1,1,0,1
}

pr_sickpaint_preview:
tic pr_sickpaint $* toc to ${}


# By Gary Osgood :
#@cli calispline : x0[%],y0[%],u0[%],v0[%],x1[%],y1[%],u1[%],v1[%],_rad0,rad1,_ang,_opacity,_color1,...
#@cli : Draw specified colored calligraphic line, tracing an underlying cubic
#@cli : hermite spline, on selected images. Default values: 'rad0=rad1=3',
#@cli : 'ang=0', 'opacity=1' and 'color1=0'.
#@cli : $ image.jpg repeat 30 { calispline {u(100)}%,{u(100)}%,{u(-600,600)},{u(-600,600)},{u(100)}%,{u(100)}%,\
# {u(-600,600)},{u(-600,600)},0.6,255 }
calispline : skip ${9=3},${10=3},${11=0},${12=1},${13=0}
  e[^-1] "Draw a calligraphic spline from ($1,$2) tangent: [$3,$4] to ($5,$6) tangent: [$7,$8] on image$?, "\
   "with pen shape: $9-$10, angle $11, opacity: $12 and color (${13--1})."
  foreach {
    x0={if(${"is_percent $1"},$1*(w-1),$1)}
    y0={if(${"is_percent $2"},$2*(h-1),$2)}
    u0={if(${"is_percent $3"},$3*(w-1),$3)}
    v0={if(${"is_percent $4"},$4*(h-1),$4)}
    x1={if(${"is_percent $5"},$5*(w-1),$5)}
    y1={if(${"is_percent $6"},$6*(h-1),$6)}
    u1={if(${"is_percent $7"},$7*(w-1),$7)}
    v1={if(${"is_percent $8"},$8*(h-1),$8)}
    r0,r1,ang,opac=${9-12}
    eval ${-mysplines}"calispline(#0,["$x0","$y0"],["$u0","$v0"],["$x1","$y1"],["$u1","$v1"],$r0,$r1,$ang,$opac,[${13--1}])"
  }

mysplines :
   status "
   calispline(ind,P0,T0,P1,T1,rad0,rad1,ang,opacity,color) = ( # Draw calligraphic line around spline P0-P1 with tangents T0,T1 on image #ind
    unref(_ds_color);
    unref(_ds_mask);
    _P0 = P0;
    _P1 = P1;
    _rad0 = rad0;
    _rad1 = rad1;
    _ang = ang;
    _opacity = opacity;
    _ds_color = resize(color,s#ind)*=abs(_opacity);
    _omopacity = 1 - max(_opacity,0);
    _C = hermite_coef(_P0,T0,P1,T1);
    _dt = _dtmin = 1/max(abs(_P1 - _P0));
    _P0 = inf;
    for (_t = 0, _t<=1, _t+=_dt,
      _P = round(mul([_t^3,_t^2,_t,1],_C,2));
      _dP = abs(mul([3*_t^2,2*_t,1,0],_C,2));
      _dt = min(_dtmin,0.75/max(_dP));
      if (_P0!=_P,
        ellipse(#ind,_P[0],_P[1],_rad0,_rad1,ang,_opacity,_ds_color);
      );
      _P0 = _P;
    );
    nan;
  );

  hermite_coef(P0,T0,P1,T1) = ( # Given location/tangent pairs, return coefficients of cubic interpolating polynomial in Hermite form
      C=mul([ 2,-2,1,1,-3,3,-2,-1,0,0,1,0,1,0,0,0 ],[ P0,P1,T0,T1 ],2);
  );
"



#@cli splinefun : [palette],curve_plot_count,complexity_level,thickness,pen_width,pen_angle
# By Gary Osgood
splinefun: -check ${"is_image_arg $1"}
   -check "${2=64}>0              && \
           ${3=3}>0 && ${3}<12    && \
           ${4=4}>2               && \
           ${5=45}                && \
           ${6=0.25}>=0 && ${6}<=1"
   -pass$1 1
   -name. palette
   foreach[^palette] {
       nm={0,n}
      -name. canvas
      -pass$1
      -name. palette
      crvcnt={w#$palette}
      res=$2
      lvl={2^$3}
      thick=$4
      ang={deg2rad($5)}
      opacity=$6
      -input $lvl,1,1,4,[u($crvcnt),u($res),u(-1,1),u(-1,1)]
      -rbf. $crvcnt,$res
      -name. plotcoords
      -sub[plotcoords] {ia}
      -mul[plotcoords] {1.75/(iM-im)}
      -fill[plotcoords] "begin(
                                sw=min(w#$canvas,h#$canvas)/2;
                                id=eye(3);
                                id[0]=sw;
                                id[2]=sw;
                                id[4]=-sw;
                                id[5]=sw
                              );
                              (id*[I(x,y),1])[0,2]"
      -permute[plotcoords] cyzx
      -split[plotcoords] c
      lc=0
      -name[^canvas,palette] plot
      -foreach[plot] {
          -name. plots
          +mirror[plots] y
          -permute. cyzx
          -fill. begin(OFS=cexp([log($thick),$ang]));I(#-1,x,y)+OFS
          -permute. cyzx
          -append[-2,-1] y
          -pass[canvas]  1
          -pass[palette] 1
          -eval "PV=crop(#$plots);
                 polygon(#$canvas,size(PV)/2,PV,$opacity,I(#$palette,$lc,0))"
          -rm
          lc+=1
      }
      -keep[canvas]
      -name[canvas] $nm
   }
   -rm[palette]


#@cli pr_dab: image_1,image_2,...
#@cli : Create alpha-blended images using existing images and insert onto the last list. If no arguments are specified, all images are blended as a new layer.
pr_dab:
if $!>1
  if $#>1 +blend[$*] alpha
  else +blend alpha
  fi
fi
display


#@cli pr_deform : _amplitude>=0,_seed,_scale,_interpolation,_mode,_boundary_conditions
#@cli : Apply random smooth deformation on selected images.
#@cli : 'interpolation' can be { 0=none | 1=linear | 2=bicubic }.
#@cli : 'mode' can be { 0:backward-absolute | 1:backward-relative | 2:forward-absolute | 3:forward-relative }.
#@cli : 'boundary_conditions' can be { 0:dirichlet | 1:neumann | 2:periodic | 3:mirror }.
#@cli : Default value: 'amplitude=10'.
#@cli : $ image.jpg +deform[0] 10 +deform[0] 20
pr_deform : skip ${1=10},${2=0},${3=1},${4=2},${5=1},${6=1}
  e[^-1] "Apply random smooth deformation on image$?, with amplitude $1."
  foreach { $3%,$3%,1,2 if $2 srand $2 fi noise. $1 r. ..,..,1,2,6 warp.. .,$5,$4,$6 rm. }


#@cli pr_iris : resolution,iris_lines_size,pupil_size,pupil_width,defect_width,ring_width,seed
#@cli : Description
#@cli : 'interpolation' can be { 0=none | 1=linear | 2=bicubic }.
#@cli : Default value: 'amplitude=10'.
#@cli : $ image.jpg +deform[0] 10 +deform[0] 20
pr_iris:
res,th,pup,wid,def,ring,seed=$*
$res,$res,1,4
foreach {
  wh=255,255,255 bk=0,0,0
  to_a r2dx 200%,0
  $def%,$def%,1,4,$bk,0
  foreach {
    r:=(w*0.5)-10  R:=$r+$def
    RGB:=u([100,100,0],[150,150,55])
    repeat 360 { ch:=u(5) if $ch>=3 col=$RGB else col=$bk fi thickline 50%,50%,$th*{w*cos($>)},$th*{w*sin($>)},$th*2,0.9,$col }
    repeat w/($th*0.5) {
      st:=$>*$th sx,sy,ex,ey:=$st,0,w-$st,h
      RGB:=u([30,150,200],[50,190,255])
      sh=1.5
      thickline $sx+$sh,$sy+$sh,$ex+$sh,$ey+$sh,{u($th)},0.5,$wh
      thickline $sx,$sy,$ex,$ey,{u($th)},1,$RGB
      sx,sy,ex,ey:=0,$st,w,h-$st
      thickline $sx+$sh,$sy+$sh,$ex+$sh,$ey+$sh,{u($th)},0.5,$bk
      thickline $sx,$sy,$ex,$ey,{u($th)},1,$RGB
    }
    repeat 30  circle {u(30,70)}%,{u(30,70)}%,{u(10)}%,0.3,255,150,0 done d
    sh. 3 fc. $bk
    ellipse. 50%,50%,{[$R*$wid,$R*$pup]},0,1,$wh
    rm.
  }

  flower. {[4,13,0,u(150)]} pr_deform. 20,$seed,1,1,1,3
  repeat 2 +pr_deform[0] 4,{$seed*$>},5,1,3,3  sh. 3 gaussian. 50%  n. 0,255 rm.  done
  repeat 3 pr_deform.. 3,{$seed*$>},{$>+1},1,3,3 rotate.. 90 done
  mirror. y blend[-1,0] alpha
  mul. 3 blend[-1,0] overlay
  +adjust_colors. ,,0 r2dx. 105% expand_xy. 100 #
  dilate. {$def/2} b. 15
  adjust_colors.. -25
  reverse[-1,-2]  blend[-2,-1] alpha
  blend add,0.7
  srand $seed +plasma , to_graya. blend add,0.3
  # Outer ring
  r,th:=(w*0.5)-10,20
  .,.,1,4,$bk,0
  l. {
    circle 50%,50%,{$r+10},1,$wh
    circle 50%,50%,{$r-$ring},1,$wh,0 b {$ring*0.2}
    sh 0,2 negate. rm.
    . repeat 3 N:=$>+1 flower. {[$N*0.5,$N*u(200,300),0,u(350)]},50%,50%,0 done  pr_deform. 2,0,6,0 blend grainmerge
    }
  blend[0,-1] alpha
  # Pupil
  R:=$r*$pup
  .,.,.,.,$bk,0
  sh. 3
  ellipse. 50%,50%,{[$r*$wid,$r*$pup]},0,1,$wh
  rm.
  repeat 3 N:=$>+1 flower. {[$N*0.5,$N*80,0,u(150)]}  done
  pr_deform. 8,0,6,0
  blur_radial. 0.6%
  blend alpha
  sh 3 fc. $bk circle. 50%,50%,$r,1,$wh erode. {$ring*0.5} rm.
  r2dx 50%,5
  pr_deform 1.5,$seed,2,1
  c 0,255

}



# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
